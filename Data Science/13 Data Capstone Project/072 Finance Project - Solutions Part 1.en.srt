1
00:00:05,310 --> 00:00:06,170
Hello everyone.

2
00:00:06,170 --> 00:00:10,700
Welcome to the day to capstone finance project solutions lecturer in this lecture.

3
00:00:10,710 --> 00:00:13,590
We're going to go over the solutions for the finance project.

4
00:00:13,860 --> 00:00:16,550
Let's go ahead and jump to Jupiter notebook to get started.

5
00:00:16,860 --> 00:00:22,470
OK so here we are at the Jupiter notebook when we go out and scroll down to the get the data section

6
00:00:22,470 --> 00:00:23,120
.

7
00:00:23,220 --> 00:00:29,760
So the first thing we had to do is actually use pandas directly read from Google Finance and there's

8
00:00:29,790 --> 00:00:33,650
a couple of notes here you had to install Pandurs data reader in order for this to work.

9
00:00:33,660 --> 00:00:37,290
And like I mentioned in the previous lecture you can just do this by going to your command line and

10
00:00:37,290 --> 00:00:43,110
saying Pipp install Pandurs dashed data reader or Konda install panda stashed data reader.

11
00:00:43,110 --> 00:00:47,880
And again there's notes here or links or more installation guidance.

12
00:00:48,540 --> 00:00:51,650
Ok then we wanted to do these imports right here.

13
00:00:51,660 --> 00:00:54,190
I went ahead and just ran that since I was already filled out.

14
00:00:54,420 --> 00:00:56,640
And now we're at the data section.

15
00:00:56,640 --> 00:01:01,680
First thing I want to do is get data using Panas data reader and we can get stock information for the

16
00:01:01,680 --> 00:01:02,760
following banks.

17
00:01:02,850 --> 00:01:08,480
Bank of America Citigroup Goldman Sachs JP Morgan Chase Morgan Stanley and Wells Fargo says we're going

18
00:01:08,480 --> 00:01:15,690
to be looking at banks and how their stock value change from and throughout the financial crisis and

19
00:01:15,690 --> 00:01:20,880
what we want to do is figure out how to get stock data from January 1st 2006 all the way up to January

20
00:01:20,880 --> 00:01:26,620
1st 2016 for each of these banks and we want to set each bank to be a separate data frame.

21
00:01:26,790 --> 00:01:31,620
If the variable name for that bank being its ticker symbol and going to a few steps first we need to

22
00:01:31,620 --> 00:01:36,690
use that time to set the start and end date time objects then we need to figure out the ticker symbol

23
00:01:36,690 --> 00:01:37,620
for each bank.

24
00:01:37,710 --> 00:01:43,280
Number three we need to figure out how to use data reader to grab info or information on the stock.

25
00:01:43,500 --> 00:01:48,540
And there's a link here use this documentation page for hints and instructions.

26
00:01:48,540 --> 00:01:51,320
And in fact that link is actually quite informative.

27
00:01:51,330 --> 00:01:57,660
It essentially gives you the answer if you scroll down here a little bit on how to grab information

28
00:01:57,660 --> 00:01:57,690
.

29
00:01:57,690 --> 00:02:02,760
So if you scroll down we'll give you Google Finance how to grab information in stock prices from Google

30
00:02:02,760 --> 00:02:03,230
Finance.

31
00:02:03,240 --> 00:02:09,210
You can go ahead and essentially just copy and paste this code from the documentation and it will run

32
00:02:09,240 --> 00:02:10,160
as expected.

33
00:02:10,380 --> 00:02:14,430
So I'm going to go ahead and essentially copy and paste this code actually type it out so I can explain

34
00:02:14,430 --> 00:02:15,090
it a bit.

35
00:02:15,090 --> 00:02:20,190
We're going to go to start off with the start and end dates and then show you how to use the web data

36
00:02:20,190 --> 00:02:23,070
reader.

37
00:02:23,160 --> 00:02:23,760
OK.

38
00:02:24,040 --> 00:02:31,610
First thing I want to do is say start and then call Date Time Date Time just a little strange to call

39
00:02:31,620 --> 00:02:34,150
date time date time but that's just the convention.

40
00:02:34,410 --> 00:02:40,400
And then we want to pass in the year the month and the day that's going to be our start date.

41
00:02:40,470 --> 00:02:46,500
And again this is essentially just copying and pasting the code right here from the documentation.

42
00:02:47,190 --> 00:02:51,410
And then I'm going to do the same thing but instead of star it's going to be my end date.

43
00:02:51,750 --> 00:02:57,080
And this is going to be in sort of 2006 2016.

44
00:02:58,080 --> 00:03:04,820
And then what we had to do is figure out the tickers for the various banks such as Bank of America and

45
00:03:04,830 --> 00:03:10,100
the first one is actually kind of shown here the A C equals data that data reader BAMC.

46
00:03:10,170 --> 00:03:16,290
Google start ends let me go and to show you an example of what that actually looks like by say B A C

47
00:03:16,470 --> 00:03:29,610
equals data thoughts data reader assin B A C is a string Google and then the starts and ends.

48
00:03:29,610 --> 00:03:29,840
All right.

49
00:03:29,840 --> 00:03:30,840
Looks like it ran.

50
00:03:30,840 --> 00:03:32,250
Let's go ahead and check up the result.

51
00:03:32,250 --> 00:03:33,900
B A C.

52
00:03:34,230 --> 00:03:39,960
And here we have B C which is essentially a data frame with a date index and then an opening price a

53
00:03:39,960 --> 00:03:43,800
high price the low price the closing price and then the volume.

54
00:03:43,800 --> 00:03:48,770
And this essentially just translates to the prices of the stocks of the opening price of the stock the

55
00:03:48,790 --> 00:03:51,580
states the high and low values on that day.

56
00:03:51,630 --> 00:03:56,040
And then the closing price on that date and then volume is just the actual volume how many stocks are

57
00:03:56,040 --> 00:03:58,120
traded on that day.

58
00:03:58,500 --> 00:04:03,750
Then what you essentially have to do is just repeat this for the other various banks and in order to

59
00:04:03,750 --> 00:04:08,280
figure out the stock tickers for the other banks you can just use a simple google search you just Google

60
00:04:08,280 --> 00:04:13,720
search the bank name such as Citigroup Plus stock ticker and you'd find it.

61
00:04:14,550 --> 00:04:14,890
All right.

62
00:04:14,970 --> 00:04:19,740
I'm going to go out and copy and paste the rest of these commands because it's essentially just exactly

63
00:04:19,740 --> 00:04:21,640
what we did before.

64
00:04:21,660 --> 00:04:29,190
So I have Citigroup is just see Goldman Sachs is just G-S J.P. Morgan Chase JPM Morgan Stanley's EMIs

65
00:04:29,250 --> 00:04:31,670
and Wells Fargo WFC.

66
00:04:31,970 --> 00:04:37,710
And the only arguments you pass the data reader are the stock ticker has a string and he repassing in

67
00:04:37,710 --> 00:04:41,720
Google and that just means use Google Finance in order to grab the data.

68
00:04:41,730 --> 00:04:47,640
You can also use Yahoo Finance if you want but I prefer Google Finance just because Yahoo recently had

69
00:04:47,640 --> 00:04:52,710
a transition or was acquired so it's better to maintain it with Google and then you can also just put

70
00:04:52,710 --> 00:04:56,580
in the start and end dates as Date Time information.

71
00:04:56,610 --> 00:04:59,940
Let's go ahead and run this cell and see what happens.

72
00:04:59,940 --> 00:05:04,350
That's so when you run it all together it may take a while because it's grabbing all this information

73
00:05:04,350 --> 00:05:05,560
from the Internet.

74
00:05:05,580 --> 00:05:07,680
So go ahead and just be patient while it runs.

75
00:05:07,710 --> 00:05:09,030
There you go it's done.

76
00:05:09,030 --> 00:05:12,920
Now let's go ahead and see in other data frame.

77
00:05:12,990 --> 00:05:15,540
We go ahead and check out a mess for Morgan Stanley.

78
00:05:15,550 --> 00:05:20,700
We can see it's the same thing that dates open high low close and then the volume traded names go all

79
00:05:20,700 --> 00:05:26,930
the way down it goes from 2006 all the way to December 1st 2015.

80
00:05:27,030 --> 00:05:33,890
So New Year's Eve now it's good and continue to the next task when a hash tag that out.

81
00:05:33,900 --> 00:05:39,440
Now we wanted to create a list of ticker symbols as strings in alphabetical order call this list ticker's

82
00:05:39,440 --> 00:05:39,930
.

83
00:05:39,990 --> 00:05:45,260
Let's go ahead and do that we'll call ticker's and then passen BSEE.

84
00:05:46,350 --> 00:05:56,880
Next one of the first quarter C then we have G-S then JPM and EMIs.

85
00:05:56,880 --> 00:06:04,380
And then finally WFC and then we want to use PD dot com can you concatenate the bank data frames together

86
00:06:04,620 --> 00:06:09,900
to a single data frame called Bank underscore stocks and you want to set the keys argument equal to

87
00:06:09,900 --> 00:06:11,220
the ticker's list.

88
00:06:11,220 --> 00:06:13,880
Also pay attention to access you concatenate.

89
00:06:14,310 --> 00:06:18,600
And that's just a kind of a warning there that you had to set the access equal to once you want to concatenate

90
00:06:18,630 --> 00:06:20,250
along the columns.

91
00:06:20,250 --> 00:06:21,080
Let's go ahead and do that.

92
00:06:21,150 --> 00:06:31,130
So I want to create the bank underscore stocks data frame and then I'll say PD concat and going to hacen

93
00:06:31,710 --> 00:06:33,930
a list of all the data frames I want to concatenate.

94
00:06:33,950 --> 00:06:44,560
So I want concatenate the BBC data frame the see G-S CPM amice Morgan Stanley and then Wells Fargo.

95
00:06:45,270 --> 00:06:49,860
And the reason I'm not passing in these arguments is strings because these are the actual data frames

96
00:06:49,860 --> 00:06:52,020
that it created up here.

97
00:06:52,010 --> 00:06:55,080
All right so in passing in a list of the data France want to concatenate.

98
00:06:55,080 --> 00:07:00,300
I want to concatenate them all along the columns which makes sense since they all share the same index

99
00:07:00,300 --> 00:07:03,040
they all share the same certain and date time index.

100
00:07:03,060 --> 00:07:08,940
I want to do this concatenation along the columns salsa axis equal to 1 and then he's argument is going

101
00:07:08,940 --> 00:07:10,230
to be this ticker's list

102
00:07:13,630 --> 00:07:16,300
and let's go ahead and see what bank stocks looks like now.

103
00:07:16,350 --> 00:07:20,350
He's the head of it and we get something that looks like this.

104
00:07:20,370 --> 00:07:25,740
Essentially now we have a multilevel index on the columns you have the bank stock ticker and then the

105
00:07:25,770 --> 00:07:33,490
open high low close and volume and everything shares the same date time index which makes sense in that

106
00:07:33,520 --> 00:07:35,840
we want to do is set the column name levels.

107
00:07:36,060 --> 00:07:38,120
And this is actually filled out for you.

108
00:07:38,130 --> 00:07:42,290
So in order to do that well we have to say banks underscore stocks.

109
00:07:42,300 --> 00:07:47,190
Columns not names and then we set them to these levels the bank ticker and the stock info.

110
00:07:47,190 --> 00:07:54,300
So once you run that sell and if you're at a Chick bank underscore stocks again the head of it it looks

111
00:07:54,300 --> 00:07:54,720
like this.

112
00:07:54,720 --> 00:07:59,910
And the only difference is now that this is actually labeled this first index level on the columns is

113
00:07:59,910 --> 00:08:05,230
labeled bank think Bank ticker and then the second one is labeled stock info.

114
00:08:05,840 --> 00:08:06,410
OK.

115
00:08:06,570 --> 00:08:07,130
Moving along.

116
00:08:07,170 --> 00:08:12,620
It's time to do some exploratory data analysis and before continuing what I wanted you to do is encourage

117
00:08:12,720 --> 00:08:19,350
you to check out the documentation on not just multilevel indexing here but also using the dot X s

118
00:08:22,170 --> 00:08:28,850
and we've actually gone over the excess the cross section method in the panel operations lecture.

119
00:08:28,890 --> 00:08:33,540
So you can go ahead and review and go back to that lecture in case you want a video explanation of the

120
00:08:33,800 --> 00:08:34,700
excess.

121
00:08:34,950 --> 00:08:40,830
But basically this cross section method allows you to grab stuff inside a multilevel index and there's

122
00:08:40,830 --> 00:08:41,810
some examples here.

123
00:08:41,840 --> 00:08:43,710
I can go ahead and zoom in on them.

124
00:08:43,770 --> 00:08:48,660
Hopefully come here and check out the examples you see this data frame you see that they can call a

125
00:08:48,660 --> 00:08:50,670
cross section of a.

126
00:08:50,880 --> 00:08:55,410
And you can also see that they can call cross-sections by passing in either a tuple or a list and grabbing

127
00:08:55,410 --> 00:08:57,150
things on the inside.

128
00:08:57,150 --> 00:08:57,570
All right.

129
00:08:57,780 --> 00:09:02,790
You can go ahead and reference the panda operations lecture or my own explanation of that access but

130
00:09:02,790 --> 00:09:06,660
it's kind of important they understand that because it's going to be a major part of this project as

131
00:09:06,660 --> 00:09:13,530
we go along in order to grab information on specific banks or specific columns.

132
00:09:13,530 --> 00:09:14,010
All right.

133
00:09:14,070 --> 00:09:19,620
Our first exploratory data analysis questions to answer is What does the max clothes price for each

134
00:09:19,620 --> 00:09:22,740
bank's stop throughout the time period.

135
00:09:22,740 --> 00:09:24,830
There's two different ways we could do this.

136
00:09:24,840 --> 00:09:30,140
One way is you could say something like this for tick in tickers.

137
00:09:30,150 --> 00:09:41,220
Remember ticker's is that list of the ticker names say something like grab the bank stocks grab tick

138
00:09:41,310 --> 00:09:48,690
and let's just see what that looks like if I say for instance me comment these lines out and just show

139
00:09:48,690 --> 00:09:52,590
you what bank stocks look like as a reminder.

140
00:09:52,590 --> 00:09:53,970
So we have head of bank stocks.

141
00:09:53,970 --> 00:09:58,810
This is a multilevel index on the top multi-level columns.

142
00:09:58,880 --> 00:10:06,180
If put in for instance b c then I get a data frame here which means I can call close off that data frame

143
00:10:06,510 --> 00:10:07,450
which gives me this.

144
00:10:07,470 --> 00:10:13,620
And since I want the max close price I can call max and it gives me something that looks like that which

145
00:10:13,620 --> 00:10:17,580
means I would essentially just replace those commands.

146
00:10:17,640 --> 00:10:25,950
We go back here to tick and then I'll actually I can just print this.

147
00:10:25,980 --> 00:10:31,690
I can say something like Prince Tich comma that.

148
00:10:31,740 --> 00:10:36,710
And here we have each bank stocks max close price throughout the entire time period.

149
00:10:36,870 --> 00:10:38,200
That's one way to do this.

150
00:10:38,340 --> 00:10:45,660
The better way to do this if you want to be kind of savvy with pandas is to use this access method and

151
00:10:45,660 --> 00:10:54,480
what you do is you say bank stocks got access for the cross section you pass in the key you want to

152
00:10:54,480 --> 00:10:56,330
do the cross section on in this case.

153
00:10:56,520 --> 00:10:58,880
I want to do it on close.

154
00:10:59,610 --> 00:11:05,520
I want to say it's on the columns axes since I'm doing it on the column so specify x 0 to 1 and then

155
00:11:05,550 --> 00:11:10,740
also specify the level since it's inside and the level is called stock info.

156
00:11:10,750 --> 00:11:15,330
Remember that's why we back above here.

157
00:11:15,330 --> 00:11:16,340
Scroll back up.

158
00:11:16,470 --> 00:11:17,620
We said stock info.

159
00:11:17,670 --> 00:11:21,460
So this outer levels called Bank Ticker this level levels called stock info.

160
00:11:21,480 --> 00:11:22,650
So we're basically asking.

161
00:11:22,800 --> 00:11:30,000
Give me the closed column for all the banks and then we're going to go ahead and do just call that max

162
00:11:30,060 --> 00:11:36,150
offer this and if we run this essentially get the exact same thing but it's a little nicer formatted

163
00:11:36,180 --> 00:11:39,010
and it was just one line of clean code here.

164
00:11:39,030 --> 00:11:39,590
All right.

165
00:11:39,690 --> 00:11:44,310
So that was the max closing price for each bank's stock throughout the entire time period.

166
00:11:44,670 --> 00:11:50,220
Now we're going to go ahead and do is create a new empty data frame called returns and this data frame

167
00:11:50,250 --> 00:11:56,220
will contain the returns for each bank's stock and returns are typically defined by this equation where

168
00:11:56,220 --> 00:12:00,680
you have a return for some time period and then pay the price.

169
00:12:00,690 --> 00:12:05,070
But essentially what it is is it breaks down to the price at a time.

170
00:12:05,070 --> 00:12:07,430
T in this case we're dealing with just dates.

171
00:12:07,620 --> 00:12:12,390
So the price that a day divided by the previous day minus one.

172
00:12:12,390 --> 00:12:19,320
So since you just the percent return and we can go out and say returns we'll make an empty data frame

173
00:12:20,580 --> 00:12:24,510
PD data frame and run that.

174
00:12:24,510 --> 00:12:28,680
So we have an empty data frame called returns and the state of frame will contain the returns for each

175
00:12:28,680 --> 00:12:29,820
bank stock.

176
00:12:30,120 --> 00:12:35,520
And here's the equation where we're going to do is move along and say we can use Panas t underscore

177
00:12:35,520 --> 00:12:41,310
change or percent change method on the close column to create a column representing the return value

178
00:12:41,310 --> 00:12:41,830
.

179
00:12:41,850 --> 00:12:47,950
So our assignment was to create a for loop that goes in for each bank stock ticker creates this return

180
00:12:47,970 --> 00:12:53,830
column and sets it as a column in the returns data frame.

181
00:12:54,180 --> 00:12:55,520
Now this is definitely a little tricky.

182
00:12:55,530 --> 00:12:56,900
So let's go ahead and break it down.

183
00:12:56,910 --> 00:13:00,410
We want to create a for loop that goes for each bank stock ticker.

184
00:13:00,480 --> 00:13:07,080
So I want to save for a tick in ticker's And then what I want to do is create a returns column so say

185
00:13:07,080 --> 00:13:10,590
returns and so that's my new data frame over here.

186
00:13:10,740 --> 00:13:21,270
I will create a new column and the column name will say be Tich concatenated with return and it's going

187
00:13:21,270 --> 00:13:30,490
to be equal to the bank stocks at that tick closing price.

188
00:13:30,510 --> 00:13:35,490
And then we just call PCTs change and this was kind of tricky to figure out.

189
00:13:36,000 --> 00:13:41,280
So let's go ahead and run this and now let's check out our returns data frame or at least the head of

190
00:13:41,280 --> 00:13:49,890
it and here ever returns data frame and it makes sense that our very first value has none or no because

191
00:13:49,890 --> 00:13:54,030
you can't get a percent return on the very first day because there's nothing in the past to compare

192
00:13:54,030 --> 00:13:54,450
it to.

193
00:13:54,460 --> 00:13:55,710
So that makes sense.

194
00:13:55,710 --> 00:14:02,280
And you can see here you basically get your return value or we're going to go ahead and do now is create

195
00:14:02,280 --> 00:14:05,520
a pair plot using Seaborn of the returns data frame.

196
00:14:05,520 --> 00:14:06,480
And there's a couple of questions there.

197
00:14:06,480 --> 00:14:09,420
What stock stands out to you and can you figure out why.

198
00:14:09,680 --> 00:14:16,770
What I'm going to go ahead and do is say just SNS dot pair plots and call returns.

199
00:14:16,770 --> 00:14:21,690
Now if I just call returns you'll notice something happens we'll get an error and the error free scroll

200
00:14:21,690 --> 00:14:28,230
down you'll notice that it says Max must be larger than men in range parameter and that's basically

201
00:14:28,230 --> 00:14:32,210
just a call back to the issue here where you have a null.

202
00:14:32,370 --> 00:14:41,130
So what you're gonna have to do specify that you want everything starting at index at location 1.

203
00:14:41,520 --> 00:14:43,450
And now when you run that you should be fine.

204
00:14:43,470 --> 00:14:48,120
Now per plus those take a while for very large data sets to keep that in mind as you wait for the plot

205
00:14:48,120 --> 00:14:48,550
.

206
00:14:48,840 --> 00:14:50,670
But you see something that looks like this.

207
00:14:50,790 --> 00:14:53,720
And the question was what stock stands out to you.

208
00:14:54,030 --> 00:14:59,200
Well the kind of look at this you'll notice that all these stocks look relatively normal as far as scatter

209
00:14:59,200 --> 00:14:59,800
plots.

210
00:14:59,800 --> 00:15:01,380
Looks like there's some correlation.

211
00:15:01,530 --> 00:15:05,010
But one of them is kind of this weird straight line bundle.

212
00:15:05,010 --> 00:15:13,680
And you notice that it happens along the sea return for Citigroup and Citigroup actually had a huge

213
00:15:13,680 --> 00:15:14,970
stock crash.

214
00:15:15,000 --> 00:15:21,270
And if you go to the Wikipedia link if you just look up Citigroup and come down here you'll notice that

215
00:15:21,300 --> 00:15:28,050
November 2008 and this actually to do with part of the global financial crisis that by November 2008

216
00:15:28,080 --> 00:15:34,020
Citigroup was insolvent and we'll actually see that huge crash when we actually visualize there Citigroup's

217
00:15:34,110 --> 00:15:35,840
stock value throughout time.

218
00:15:35,850 --> 00:15:40,080
But she can go ahead and kind of read about this but this kind of has to do more with the story behind

219
00:15:40,350 --> 00:15:42,570
our data analysis on why this happened.

220
00:15:42,720 --> 00:15:47,870
And this is available at the Wikipedia page for just Citigroup as a company.

221
00:15:47,880 --> 00:15:48,330
All right.

222
00:15:48,360 --> 00:15:53,220
So hopefully you noticed that kind of strange behavior of this weird return but that's actually do that

223
00:15:53,220 --> 00:15:54,480
crash.

224
00:15:54,480 --> 00:15:55,250
OK.

225
00:15:55,470 --> 00:15:57,890
We're going to go ahead and stop it here.

226
00:15:58,260 --> 00:16:01,080
And when we come back on part two we're going to investigate.

227
00:16:01,080 --> 00:16:06,330
This returns day to frame a little more and then do some more investigation as far as the distribution

228
00:16:06,420 --> 00:16:07,660
of the returns.

229
00:16:07,830 --> 00:16:10,390
And then we'll visualize the data even more.

230
00:16:10,410 --> 00:16:12,470
Thanks everyone and I'll see you at the next lecture
