1
00:00:05,220 --> 00:00:09,220
Herkese merhaba ve Python kazanın ikinci bölümüne hoşgeldiniz.

2
00:00:09,240 --> 00:00:12,240
Devam edin başlamak için Jüpiter defterine atlayalım.

3
00:00:12,660 --> 00:00:12,900
Tamam.

4
00:00:12,900 --> 00:00:14,630
İşte bir defterde çip var.

5
00:00:14,640 --> 00:00:22,350
Geçmişte, iç içe geçmiş bir listeden öğeleri yakalamak için ne yaptığımız üzerine dizgiler ve listeler üzerinde gittik ve

6
00:00:22,350 --> 00:00:26,730
bunlar birbirleriyle ilişkilendirildi, çünkü bunlar aslında yalnızca öğe dizileri ve

7
00:00:26,760 --> 00:00:33,120
aynı dizin gösterimini ister bir dizeyle isterse de dizinde kullanabilirsiniz. parantez içinde istediğiniz parantezleri parantez

8
00:00:33,210 --> 00:00:38,310
içine alıp dizinin o dizinde veya diliminde bulunan öğeleri dolduran bir liste.

9
00:00:38,310 --> 00:00:41,950
Devam edin ve dişlileri sözlükler üzerine düşünmeye yönlendirelim.

10
00:00:42,030 --> 00:00:49,650
Kıvırcık parantez belirterek Python'da bir sözlük oluşturabilir ve daha sonra bir anahtarın bir iki nokta üst üste

11
00:00:50,010 --> 00:00:53,330
ve bu anahtara karşılık gelen değeri bulacaksınız.

12
00:00:53,430 --> 00:00:54,440
Başka bir örnek göster.

13
00:00:54,450 --> 00:01:04,410
Devam edelim ve iki iki nokta üst üste koyacağız ve Q2 için değer, bir ila üç sözlükin anahtar değer çiftleri

14
00:01:04,410 --> 00:01:09,830
gibi davranmasını, sıralamada elemanlar tutmak yerine karma bir tablo gibi davranacaktır.

15
00:01:09,840 --> 00:01:14,630
Tuşlarla unsurları tutar ve sonra gerçek değerlerini tutar.

16
00:01:14,640 --> 00:01:20,910
parantez gösteriminde geçen gerçek bir sıra pozisyonunda gerçek kendisidir ve değeri döndürmemektedir.

17
00:01:20,910 --> 00:01:26,250
Yani 0 gibi bir şey söylemek yerine işe yaramayacak bir

18
00:01:26,250 --> 00:01:30,420
şey söylemek yerine, orada hiçbir anahtar bulunmamaktadır ve

19
00:01:30,420 --> 00:01:36,000
Mesela 123 sayısını elde etmek isterseniz, sözlüğünüzü çağıracağınızdan ve o değere

20
00:01:36,000 --> 00:01:38,200
karşılık gelen anahtarı geçireceksiniz demektir.

21
00:01:38,250 --> 00:01:45,150
Bu durumda bir iki üç ve sözlükler temel olarak herhangi bir öğeyi değerler olarak alabilir.

22
00:01:45,240 --> 00:01:51,120
Yani bir anahtar K-1 iki nokta üst üste gelebilir ve sonra burada başka bir listeye sahip olabilirsiniz.

23
00:01:51,150 --> 00:01:52,900
Bir, iki, üç.

24
00:01:53,790 --> 00:02:00,170
Şimdi bir sözlük çattırırsam bir KK bir anahtar ve daha sonra listede 2:59 öğeye sahip olurum.

25
00:02:00,330 --> 00:02:04,590
Böylece K-1'i arayabilir ve bu listeye bir iki üç verebilirim.

26
00:02:04,890 --> 00:02:08,740
Ve şimdi bu listeye sahibim, o zaman normal indeksleme yapabilirim.

27
00:02:08,880 --> 00:02:11,250
Bu liste dışı, anahtar değil.

28
00:02:11,580 --> 00:02:13,600
Öyleyse devam edelim ve iki tane alalım.

29
00:02:13,680 --> 00:02:19,230
İndeks 1'de olacak ve bu temel olarak iki adıma ayrılmakla aynı şey.

30
00:02:19,650 --> 00:02:22,260
Yani böyle bir şey yapabilirsin.

31
00:02:22,260 --> 00:02:26,030
Listem, 1. Çeya'daki öğeye eşit.

32
00:02:26,310 --> 00:02:31,800
olursunuz. Alıştırmalar yaparsanız, iç içe geçmiş bir sözlük ve iç içe geçmiş liste oluruz.

33
00:02:31,800 --> 00:02:39,090
Ve daha önce listem olan listeme bakarsanız ve bu liste için ne isterseniz onu yakalamak için brechen gösterimini

34
00:02:39,090 --> 00:02:45,000
kullanırsınız veya hepsini tek bir adımda aynı satıra yaparsınız ve buna benzer bir şeye sahip

35
00:02:45,070 --> 00:02:49,620
Gerçekten başka bir sözlük içinde iç içe geçmiş bir sözlük

36
00:02:49,620 --> 00:02:58,180
içerebileceğim bir başka örnek daha göstereceğim, böylece diğer sözlükte K-1 kolon pasan'ı kıvırcık parantezler kümesiyle orada pas tuşu ve

37
00:02:58,260 --> 00:03:04,140
iç anahtarın iki nokta üstüste gibi bir şey söyleyebilirim ve sonra bir liste değerler.

38
00:03:04,140 --> 00:03:06,100
Bir, iki, üç.

39
00:03:06,120 --> 00:03:09,010
Diyelim ki bu iki numarayı almak istiyorum.

40
00:03:09,390 --> 00:03:15,450
Yapmanız gereken ilk şey K-1'i aramaktır ve bu sözlüğü döndürür.

41
00:03:15,450 --> 00:03:20,490
Sonradan bir çağrı iç anahtarına ihtiyacım var, böylece başka bir parantez dizisini yapabilir

42
00:03:20,490 --> 00:03:23,310
veya değişken atamayı kullanarak birden fazla adıma bölebilirim.

43
00:03:23,310 --> 00:03:24,950
Ancak hepsini tek bir satırda yapacağız.

44
00:03:25,440 --> 00:03:32,640
Ve şu anda bir iki üç tane var ve iki tane de ikinci dizin olan 0 1 ve orada iki

45
00:03:32,640 --> 00:03:33,230
numarayı kapıyor.

46
00:03:33,570 --> 00:03:36,770
Böylece sözlükler herhangi bir düzen tutmaz.

47
00:03:36,770 --> 00:03:40,410
Bunlar sadece anahtar değer çift eşlemeleridir.

48
00:03:40,410 --> 00:03:44,550
Şimdi mantıksızlar hakkında konuşalım milyarlarca ve Python oldukça basit.

49
00:03:44,550 --> 00:03:50,610
Bu doğrudur ve daha sonra büyük harfle T ile yanlış ve f harfini kullanır.

50
00:03:50,640 --> 00:03:54,930
Tamam, karşılaştırma operatörleri hakkında konuşurken bunlara geri döneceğiz.

51
00:03:54,960 --> 00:03:58,010
Ancak, tuple'lerden bahsedelim ve ardından ayarlanalım.

52
00:03:58,110 --> 00:04:05,460
Bir listenin yalnızca köşeli ayraçların içinde virgülle ayrılmış karakter dizisi olarak

53
00:04:05,460 --> 00:04:06,630
tanımlandığını unutmayın.

54
00:04:06,930 --> 00:04:14,850
Ve devam edip bir listeyi indeksleme kullanarak listeden çıkardığınız öğeleri kapmak için parantezler yerine

55
00:04:14,850 --> 00:04:22,140
köşeli parantezler kullanmak çok benzer ve yine de bu paragraftaki öğeleri parantez işareti

56
00:04:22,140 --> 00:04:24,980
kullanarak bir liste gibi kapatabiliyorsunuz.

57
00:04:25,020 --> 00:04:30,840
İşte bu parantezlerin bir kümesi ile köşeli ayraçların bir listesi arasındaki en önemli fark.

58
00:04:31,410 --> 00:04:40,800
Listemde tekrar dönüp ilk maddenin yeni dudaklar sözcüğüne atanmasını denersem Bunu tekrar çalıştırayım çünkü

59
00:04:40,800 --> 00:04:44,060
aslında tüm listeyi yeniden atadım.

60
00:04:44,220 --> 00:04:46,410
Listeyi tekrar kontrol edelim.

61
00:04:46,410 --> 00:04:46,620
Tamam.

62
00:04:46,620 --> 00:04:48,850
Listemi yazdırırsam bir iki üç tane sahibim.

63
00:04:48,990 --> 00:04:50,690
Bu listede ilk maddeyi tut.

64
00:04:50,700 --> 00:04:52,060
Sıfır.

65
00:04:52,110 --> 00:04:52,890
Mükemmel.

66
00:04:52,890 --> 00:04:57,750
Şimdi, önceki dersimde yaptığımız gibi, sıfır olanı sıfırlamama izin verin.

67
00:04:57,750 --> 00:05:06,210
Ve şimdi listemi gözden geçirmek için element 0'ı yeni, sonra da 3'e tekrar atadım, bunu tuple için yapmak

68
00:05:06,210 --> 00:05:06,730
istiyorum.

69
00:05:06,730 --> 00:05:12,540
Bununla birlikte, ders grubuna bakarsak, bir iki üç diyebiliriz, eşit getirmek yerine yeni

70
00:05:12,540 --> 00:05:13,870
bir hata alacağım.

71
00:05:14,220 --> 00:05:18,780
Bunun nedeni, tuple'lerin değişmez olması ve öğe atamayı desteklememesidir.

72
00:05:18,780 --> 00:05:23,250
Demek istediğim, bir takımın içindeki öğeleri değiştiremezsiniz.

73
00:05:24,440 --> 00:05:29,610
Bu, bir kullanıcının nesne dizisinin içindeki öğeleri değiştiremediğinden emin olmak istediğinizde bir

74
00:05:29,670 --> 00:05:31,690
grup kullanmak isteyeceğiniz anlamına gelir.

75
00:05:31,740 --> 00:05:37,980
Ve bu, bir tuple ve bir tuple değiştirilemez bir liste arasındaki ana farktır ve bir liste mutable,

76
00:05:38,220 --> 00:05:40,360
bir listenin içindeki öğeleri değiştirebilirsiniz demektir.

77
00:05:40,500 --> 00:05:43,110
Aynı şeyi, eğer bir grup halinde yapamazsın.

78
00:05:43,110 --> 00:05:43,740
Tamam.

79
00:05:43,860 --> 00:05:51,360
Şimdi setleri Python'da tartışmak için bir set benzersiz öğelerden oluşan bir koleksiyon.

80
00:05:51,360 --> 00:05:55,580
nokta üst üste çizgileri bulunmadığı halde, parantez parantezleri bir sözlük gibi görünüyor.

81
00:05:56,850 --> 00:05:58,590
Ayrıca, yalnızca öğeler olan iki

82
00:05:58,590 --> 00:06:03,310
Şimdi bu sayıların bir kereden fazla yazarsam ne olacağına dikkat edin.

83
00:06:04,650 --> 00:06:10,130
Bir kümesi yalnızca benzersiz öğelerle tanımlandığından hala aynı çıktıyı elde ediyorum.

84
00:06:10,290 --> 00:06:16,650
Anlamı, eğer aynı elemanların katlarına koymayı denersem, benzersiz öğelere indirgeyecek

85
00:06:17,090 --> 00:06:26,980
ve aslında sizin için benzersiz unsurları yakalamak için bir set fonksiyonu ve pasan bir liste çağırabilirsiniz.

86
00:06:27,040 --> 00:06:33,780
Bu yüzden, bir dizi tekrarlanan öğeyi set işleğine geçirip benzersiz öğelerin bir kümesini döndürürüm.

87
00:06:34,410 --> 00:06:40,060
Bir sete öğeler eklemek isterseniz, devam edin ve örneğin evet demektir.

88
00:06:40,080 --> 00:06:47,790
iki üçünü söyleyeceksiniz. Örneğin eklemek istediğiniz öğeye koyduğunuz Add yöntemini kullanacaksınız. 5.

89
00:06:47,790 --> 00:06:48,770
Bir

90
00:06:48,900 --> 00:06:52,970
Ve o seti tekrar kontrol edersek 1 2 3 5 alırız.

91
00:06:53,160 --> 00:07:00,600
5'yi tekrar eklemeye çalışırsam bir hata almazsınız ancak aynı kalsın, çünkü yalnızca bir benzersiz örneğin

92
00:07:00,600 --> 00:07:04,160
5 olduğu bir kümenin içinde izin verilir.

93
00:07:04,170 --> 00:07:04,470
Tamam.

94
00:07:04,500 --> 00:07:07,440
Gerçekten bu derste kümelerle gerçekten çalışmak istiyoruz.

95
00:07:07,440 --> 00:07:09,010
Ama onlardan haberdar olmanı istiyorum.

96
00:07:09,210 --> 00:07:11,940
Bunlar sadece benzersiz unsurlardan oluşan bir koleksiyon.

97
00:07:12,170 --> 00:07:12,780
TAMAM.

98
00:07:13,080 --> 00:07:18,620
Şimdi, karşılaştırma operatörleri hakkında konuşalım karşılaştırma operatörleri, iki elemanı birbirine kıyaslamanıza

99
00:07:18,620 --> 00:07:19,440
izin veriyor.

100
00:07:19,440 --> 00:07:23,320
Bunlar vb. Den daha az olanlardan daha fazlası gibi şeylerdir. Örneğin girip yeni bir hücre oluşturun.

101
00:07:24,210 --> 00:07:26,820
Diyelim ki ikiden büyüktür ve

102
00:07:26,820 --> 00:07:33,060
ifadenizin ne olduğuna bağlı olarak doğru veya yanlış bir boolean değeri döndürür.

103
00:07:33,060 --> 00:07:34,240
Yani ikiden daha büyük bir yanlıştır.

104
00:07:34,250 --> 00:07:36,990
1 2'den küçük doğrudur.

105
00:07:37,040 --> 00:07:39,700
Ve aynı şeyi, eşit veya daha büyük veya eşit veya daha düşük için yapabilirsiniz.

106
00:07:40,200 --> 00:07:47,980
Eşitliği iki eşit işaretle kontrol edebilir ve burada sözdizimini vurgulamanın

107
00:07:48,000 --> 00:07:53,100
size nasıl yardımcı olduğuna dikkat edin.

108
00:07:53,100 --> 00:07:54,480
Yani biri eşittir.

109
00:07:54,540 --> 00:07:55,770
Bu doğru.

110
00:07:55,800 --> 00:07:56,880
Biri ikiye eşit, yanlış olan budur.

111
00:07:57,210 --> 00:07:59,410
Doğru değil.

112
00:07:59,430 --> 00:08:00,670
Şimdi iki eşit işareti kullanmak istediğinizi unutmayın.

113
00:08:00,690 --> 00:08:03,650
Böyle bir şey yapmaya kalkışırsanız bir hataya düşersiniz

114
00:08:03,660 --> 00:08:07,970
çünkü Python gerçek bir karşılaştırma işlemi değil değişken atama yapmaya çalıştığınızı düşünüyor.

115
00:08:07,980 --> 00:08:12,190
Yaptığınız herhangi bir kaliteyi kontrol etmek isterseniz yapın.

116
00:08:12,330 --> 00:08:14,550
Ünlem işareti eşit işareti.

117
00:08:14,550 --> 00:08:16,880
Yani biri üç eşit değil.

118
00:08:16,920 --> 00:08:19,060
Bu aslında doğrudur.

119
00:08:19,290 --> 00:08:20,500
Birinin üçlüğe eşit

120
00:08:20,550 --> 00:08:25,830
olmadığı ve aynı şeyi yalnızca sayıların değil, dizelerle de yapabileceğiniz doğrudur.

121
00:08:27,180 --> 00:08:28,130
Satın almak eşit derecede yüksektir.

122
00:08:28,170 --> 00:08:30,410
Bu yanlış.

123
00:08:30,450 --> 00:08:31,070
Eşit değildir, aynı değildir.

124
00:08:31,080 --> 00:08:33,780
Bu doğrudur.

125
00:08:33,810 --> 00:08:35,450
Şimdi, bu karşılaştırma operatörlerini,

126
00:08:35,460 --> 00:08:40,380
and ve and or gibi bazı mantıksal operatörlerle birleştirmekten bahsedelim.

127
00:08:40,400 --> 00:08:42,900
Şu an sadece bir duruma bakıyoruz, ikiden de az.

128
00:08:43,010 --> 00:08:46,790
Bu doğrudur.

129
00:08:47,040 --> 00:08:48,300
Ya onu üçten

130
00:08:48,350 --> 00:08:53,900
iki gibi başka bir koşulla birleştirmek istiyorsak, anahtar kelimeyi ve bunu yapmak için kullanabiliriz.

131
00:08:53,970 --> 00:08:55,780
Bu yüzden, bir ikiden az ve üçten az olacak diyecekler.

132
00:08:55,800 --> 00:09:00,790
Ve bu gerçek dönüşecektir.

133
00:09:01,080 --> 00:09:02,890
Bununla birlikte, bunlardan biri yanlış seçilirse, ikiden biri az olur.

134
00:09:02,940 --> 00:09:06,780
Bu doğru ve üçten çok daha büyük.

135
00:09:06,810 --> 00:09:09,520
Yanlış olsun.

136
00:09:09,560 --> 00:09:10,620
Dolayısıyla, doğru ve yanlış veya yanlışları döndürürsün.

137
00:09:10,620 --> 00:09:14,970
Yani operatörün tüm koşulları doğruysa.

138
00:09:14,970 --> 00:09:18,140
Şahsen bu ifadeleri parantez içine koymayı seviyorum.

139
00:09:18,410 --> 00:09:22,440
Bu yüzden biraz daha okunabilir konum.

140
00:09:22,620 --> 00:09:24,020
Bunu yapmak zorunda değilsiniz,

141
00:09:24,030 --> 00:09:28,290
ancak bunu öneririm çünkü daha sonra bu kodu geri döndüğünüzde biraz daha okunabilir.

142
00:09:28,290 --> 00:09:31,320
Ayrıca şu andan itibaren gerçekten

143
00:09:31,320 --> 00:09:37,250
benzeyen OR operatöre sahipsiniz, ancak bu durumda bunlardan sadece biri doğrudur.

144
00:09:37,250 --> 00:09:37,790
Dolayısıyla, birinden iki veya üçten çok büyük diyebiliriz.

145
00:09:37,860 --> 00:09:42,810
Bunlardan bir tanesi doğru.

146
00:09:42,990 --> 00:09:45,330
Birincisi.

147
00:09:45,330 --> 00:09:46,410
O halde gerçeğe dönüşürüz.

148
00:09:46,470 --> 00:09:47,990
Ve aslında bunları birbirinin

149
00:09:48,170 --> 00:09:54,300
üstüne yapıştırabilirsiniz, böylece diğerlerinde veya burada bizim için bir eşittir bir vs. eşit diyebilirsiniz. Ve eğer gerçekten bunları anlamak istiyorsan, aslında sadece Passons'ın düz boolean değeri gerçekten doğru ve gerçek

150
00:09:54,300 --> 00:09:56,220
olanı döndürür Gerçek doğru ve

151
00:09:56,410 --> 00:10:00,210
yanlış döndürür Doğru veya yanlış gerçektir ve bu temelde budur.

152
00:10:01,020 --> 00:10:13,850
Yani sadece ya da.

153
00:10:13,910 --> 00:10:14,130
Ve şimdi devam edelim ve if else ifadelere bakarak bazı kod bloklarını tartışalım.

154
00:10:14,140 --> 00:10:15,030
Bir

155
00:10:15,110 --> 00:10:24,990
koşulu doğruysa kodları yürütmek isteyeceğiniz çok sayıda ve bunu yapmak için bir L ifadesi bıraktıysanız, bunu kullanabilirsiniz.

156
00:10:25,370 --> 00:10:32,060
Diyelim ki ikimiz birden az ise bir şartımız var.

157
00:10:32,090 --> 00:10:34,450
Bir baskı deyimi gibi bir tür eylem gerçekleştirmek istiyoruz.

158
00:10:34,460 --> 00:10:40,830
Devam edelim ve Evet diyeyiz.

159
00:10:41,180 --> 00:10:45,510
Demek istediğimiz, eğer bu koşul doğru kolon ise ve burada bir boşluk bloğu fark ediyorsanız

160
00:10:45,710 --> 00:10:47,620
ve bu Python'da gerçekten önemlidir diyorsun.

161
00:10:48,470 --> 00:10:55,370
Python, kod yürütme deyimlerinin bloklarını ayırmak için köşeli parantez kullanmaz.

162
00:10:55,370 --> 00:10:56,990
Onun yerine boşluk kullanır.

163
00:10:57,020 --> 00:11:02,030
Ve burada sadece iki nokta üst üste sonra girerseniz otomatik olarak Jüpiter'de girinti yapacaktır.

164
00:11:02,030 --> 00:11:03,800
Python'u destekleyen birçok fikir de aynı şeyi yapacaktır.

165
00:11:03,890 --> 00:11:08,640
Tamam, elimizde.

166
00:11:08,930 --> 00:11:12,920
Biri bir eylem gerçekleştirmekten daha az ise ve temelde gerçek baskı kodunu vb. Yerine getirirse

167
00:11:12,920 --> 00:11:13,590
bunu söylemek demektir. Veya iki artı iki eşit iki artı iki diyebilirsiniz gibi öğeler yapabilirsiniz. Ve sonra X gördüğünüzde bunun dört olacağını farkedeceksiniz.

168
00:11:13,610 --> 00:11:24,290
Bu sadece bir if deyimi.

169
00:11:24,590 --> 00:11:26,260
Dolayısıyla, bazı koşul doğruysa, alt sütunda girintili olan kod bloğunu çalıştırın.

170
00:11:26,390 --> 00:11:34,340
Tamam.

171
00:11:34,360 --> 00:11:37,020
Şimdi yapabileceğimiz başka operasyonlar hakkında konuşalım.

172
00:11:37,100 --> 00:11:38,290
Diyelim ki birden

173
00:11:38,300 --> 00:11:44,680
fazla şartları kontrol etmek istiyoruz veya doğru değilse bir şey olmasını istediğimizi düşünelim.

174
00:11:44,680 --> 00:11:45,470
Bu yüzden eğer birisi Supe'nin basmalarına eşitse, o zaman Colan'ın son basacağı baskılar diyelim.

175
00:11:45,620 --> 00:11:49,240
Ve eğer bu koşul doğruysa, aksi takdirde bu kodu uygulayacağını söyleyecektir.

176
00:11:49,520 --> 00:11:54,860
hiçbir şey doğru olmazsa ve else'in birbiriyle bağlantılı olduklarını bildiklerini if ​​ifadesinde nasıl sıraladığını not edin.

177
00:11:54,860 --> 00:11:55,600
Yoksa yukarıdaki

178
00:11:55,670 --> 00:12:12,400
Colin Crantz son olarak bu kodu çalıştırdıysam son ben idare ederim ve devam ettirirsem bu ilk koşulu doğru

179
00:12:12,440 --> 00:12:19,460
kılacak şekilde ilk önce idam ediliyor demektir.

180
00:12:19,550 --> 00:12:26,180
Şimdi belki sadece bir koşul ve ardından başka bir deyim olmaksızın birden çok koşul üzerinde kontrol etmek istiyor olursunuz.

181
00:12:26,240 --> 00:12:28,230
Birden fazla koşul kontrol etmek için solu kullanabilirsiniz.

182
00:12:28,330 --> 00:12:35,300
Böylece devam edebilirsiniz.

183
00:12:35,300 --> 00:12:39,970
Devam edin ve böyle bir şey söyleyin.

184
00:12:39,980 --> 00:12:45,350
Elif 3, 3'e eşittir.

185
00:12:45,770 --> 00:12:50,710
Şimdi içeri girelim ve ilkini yanlış olarak tekrar edelim.

186
00:12:51,530 --> 00:12:52,350
Orta basacak başka bir şey basacağız.

187
00:12:52,370 --> 00:12:53,320
Tamam.

188
00:12:53,350 --> 00:12:56,850
Öyleyse devam edelim ve bunu çalıştırıp neler olduğunu çözelim.

189
00:12:56,870 --> 00:12:59,860
Python sadece bunu yapıyor, eğer bu koşul doğruysa, bu kod bloğunu aksi halde yürütmek diyorsunuz.

190
00:13:00,200 --> 00:13:04,660
Yoksa bu koşul doğruysa.

191
00:13:04,670 --> 00:13:05,030
Bu blok kodunu yürütün.

192
00:13:05,030 --> 00:13:07,920
istediğiniz sayıda ifadeyi istiflemeye devam edin.

193
00:13:07,930 --> 00:13:14,630
Yukarıdaki koşullardan hiçbiri doğru değilse bu blok kodunu uygulayın ve burada istediğinizi söyleyebilmek için

194
00:13:14,750 --> 00:13:18,030
Elif dışarı çıkıp dördü dört Crantz saniyeye eşit olup olmadığını söyleyecek.

195
00:13:18,230 --> 00:13:20,820
Tamam.

196
00:13:20,840 --> 00:13:26,630
Ve burada ne olduğuna dikkat et.

197
00:13:26,960 --> 00:13:29,910
Bu doğru olmasına rağmen üç üç eşittir.

198
00:13:30,260 --> 00:13:38,210
Gerçek olan bir koşulun ilk örneğini ancak yürüteceğiz.

199
00:13:38,240 --> 00:13:38,530
Ve bu, elif

200
00:13:38,530 --> 00:13:39,990
else ifadeleriyle kullanıldığında ilk gerçek durumu gerçekleştireceğini aklınızda bulundurmanız gereken önemli bir şey ve işte budur.

201
00:13:40,220 --> 00:13:43,500
Tamam.

202
00:13:43,580 --> 00:13:47,580
Bu bölüm 2 ders serisi için gelecek döngüler while

203
00:13:47,660 --> 00:13:52,190
döngüleri ve daha sonra bazı Python işlevleri için tartışmaya başlayacağız.

204
00:13:52,190 --> 00:13:56,380
TAMAM.

205
00:13:56,420 --> 00:13:56,960
Yaptığımız şeyle

206
00:13:57,320 --> 00:14:03,140
ilgili hızlı bir inceleme yaptık ve tekrar anahtar değer çiftleri olan üst sözlüklere geri döndük ve tuşları girerek değerleri kaptırabilirsiniz.

207
00:14:03,230 --> 00:14:05,310
Hatırlıyorum, bir sözlük içinde iç içe sözlükler veya iç içe geçmiş listeler içerebilir.

208
00:14:05,690 --> 00:14:06,100
Şimdi boolean değerler doğru ve yanlış.

209
00:14:06,140 --> 00:14:12,050
Değişmez olan listelerimiz var.

210
00:14:12,050 --> 00:14:15,880
Listelerden çok benzer, çünkü tuple öğenin yeniden atamasını

211
00:14:15,970 --> 00:14:20,340
desteklemez, çünkü bir takvimin içinde olduğunda bir şeyler değiştiremezsiniz.

212
00:14:20,780 --> 00:14:23,290
Setleri hatırlıyor musun, setler sadece benzersiz öğelerden oluşan bir koleksiyon.

213
00:14:23,420 --> 00:14:27,170
Yani bir grup tekrarlanan element varsa ve bir setin varsa, sadece benzersiz olanları.

214
00:14:27,440 --> 00:14:32,190
Şimdi karşılaştırma operatörleri eşitlik kontrolüne eşit veya eşit olmayan eşitlik değerinden daha büyük

215
00:14:32,190 --> 00:14:34,670
veya daha düşüktür ve eşitsizliği kontrol ederiz.

216
00:14:34,670 --> 00:14:39,500
Ve sen de dizeleri için aynı şeyi yapabilirsin.

217
00:14:39,500 --> 00:14:45,040
Bu mantıksal operatöre sahipsiniz ve daha sonra birden çok koşullu deyimi karşılaştırabilirsiniz.

218
00:14:45,410 --> 00:14:50,780
Ve sonra yığınlanmış duruma bağlı olarak kod bloklarını gerçekleştirmenize izin veren ve

219
00:14:50,780 --> 00:14:53,080
if elefant else mantığına sahipsiniz.

220
00:14:53,120 --> 00:14:54,940
Tamam.

221
00:14:55,010 --> 00:15:00,830
Umarım bu dersin tadını çıkarırsınız.

222
00:15:01,070 --> 00:15:06,620
Bir sonraki görüşürüz.

223
00:15:06,620 --> 00:15:10,230
&nbsp;

224
00:15:10,340 --> 00:15:11,420
&nbsp;

225
00:15:11,450 --> 00:15:12,730
&nbsp;

226
00:15:12,740 --> 00:15:14,060
&nbsp;
