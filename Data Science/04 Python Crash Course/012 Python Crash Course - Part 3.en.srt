1
00:00:05,520 --> 00:00:09,570
Hello everyone and welcome to part three of the Python crash course.

2
00:00:09,570 --> 00:00:13,470
Let's go ahead and jump right back to Jupiter notebook where we left off last time.

3
00:00:13,470 --> 00:00:13,710
All right.

4
00:00:13,710 --> 00:00:15,260
Here I am at the Jupiter notebook.

5
00:00:15,270 --> 00:00:18,680
Last time we left off on if elif and L statements.

6
00:00:18,810 --> 00:00:25,350
Now we're going to go and quickly cover for loops and while loops for loops allow you to iterate through

7
00:00:25,410 --> 00:00:33,770
a sequence I'm going to make an object called S-C Q For sequence and say it's one two three four five

8
00:00:33,770 --> 00:00:34,270
.

9
00:00:34,380 --> 00:00:35,860
So it's just the list of numbers.

10
00:00:36,000 --> 00:00:41,310
And then I can use a for loop to perform or execute some block of code for every single item in that

11
00:00:41,310 --> 00:00:42,290
sequence.

12
00:00:42,570 --> 00:00:44,410
Meaning you can do something like this for.

13
00:00:44,430 --> 00:00:45,880
And that's the key word here.

14
00:00:46,260 --> 00:00:53,070
For item in and then that object that's a sequence as the queue perform or execute some block of code

15
00:00:53,070 --> 00:00:53,670
.

16
00:00:53,790 --> 00:00:57,490
In this case that's going to be prints item.

17
00:00:57,840 --> 00:01:04,590
And now I've been able to print the item for each element in that sequence something to note here is

18
00:01:04,590 --> 00:01:08,850
that this temporary variable name item can be whatever you want it to be.

19
00:01:08,850 --> 00:01:14,600
So for instance I can go ahead and replace this with something like jelly and it will still work.

20
00:01:14,850 --> 00:01:22,050
So for jelly in sequence or in a CQ print jelly and there you have it it's the exact same thing.

21
00:01:22,230 --> 00:01:25,850
So you probably want to choose these words or temporary variable names.

22
00:01:25,850 --> 00:01:27,660
Carefully here.

23
00:01:27,660 --> 00:01:28,550
These are numbers.

24
00:01:28,590 --> 00:01:34,590
So a good choice might be something like and an M for number and that way when it come back this code

25
00:01:34,590 --> 00:01:40,170
at some later date I can remember what I'm actually performing or doing here something to keep in mind

26
00:01:40,290 --> 00:01:45,720
is that this block of code that executes it doesn't have to be actually related to the items inside

27
00:01:45,720 --> 00:01:46,680
of the sequence.

28
00:01:46,680 --> 00:01:51,070
You can do anything you want here so I can say prints hello.

29
00:01:51,570 --> 00:01:56,130
And that's just going to go and say OK for every element in here I going to perform this action meaning

30
00:01:56,130 --> 00:01:59,210
I'm just going to print Hello five times.

31
00:01:59,210 --> 00:02:04,650
Now let's go ahead and show you how you can use a while loop to continually perform an action until

32
00:02:04,650 --> 00:02:06,910
some condition has been met.

33
00:02:07,080 --> 00:02:18,750
I'm going to go ahead and type I is equal to 1 and then say while I is less than five colon and then

34
00:02:18,750 --> 00:02:24,630
I'm going to perform some block of code while this condition happens to be true and I'm going to go

35
00:02:24,630 --> 00:02:35,240
in and say print I is colon curly brackets and then use that format to so passen either there.

36
00:02:35,250 --> 00:02:40,740
Now don't run this quite yet because look what's going to happen I set eyes equal to one and then I

37
00:02:40,740 --> 00:02:42,890
said OK well I'm less than five.

38
00:02:43,020 --> 00:02:44,260
Go ahead and print this.

39
00:02:44,340 --> 00:02:50,820
If I just run this well I will get an infinite loop meaning the cell would just go forever because I

40
00:02:50,820 --> 00:02:52,380
will always be less than five.

41
00:02:52,710 --> 00:02:57,900
If you happen to have a cell it's accidently only running forever and you'll notice either by continually

42
00:02:57,900 --> 00:03:02,870
getting output or by having an asterix here instead of a number for a very long time.

43
00:03:02,880 --> 00:03:09,640
What you should do is go to Colonel and then click restart in order to avoid this issue.

44
00:03:09,690 --> 00:03:14,460
Going to say why is equal to plus 1.

45
00:03:14,490 --> 00:03:18,320
And now when I run this I execute this block of code.

46
00:03:18,390 --> 00:03:22,110
So we start off with I is one which was the first value we gave it.

47
00:03:22,170 --> 00:03:25,140
Then we printed eyes 1 and we added 1.

48
00:03:25,170 --> 00:03:29,130
I then the while loop again checked ok as to less than five.

49
00:03:29,130 --> 00:03:30,180
Well that's true.

50
00:03:30,180 --> 00:03:34,390
So print's eyes to add that add 1 to it is three less than five.

51
00:03:34,410 --> 00:03:35,500
Well that's true.

52
00:03:35,540 --> 00:03:36,700
Prince has three.

53
00:03:36,720 --> 00:03:39,170
Add 1 to it is for less than five.

54
00:03:39,180 --> 00:03:39,850
That's true.

55
00:03:39,870 --> 00:03:42,480
Prince is for add 1 to it.

56
00:03:42,480 --> 00:03:44,700
And then finally is five less than five.

57
00:03:44,700 --> 00:03:45,920
Well that is not true.

58
00:03:45,990 --> 00:03:49,500
So I went ahead and just finished and broke out of that loop.

59
00:03:49,620 --> 00:03:51,330
And that's how a while loop works.

60
00:03:51,420 --> 00:03:58,410
It's basically going to execute some block of code while some condition happens to be true.

61
00:03:58,430 --> 00:04:04,230
OK let's go in and discuss a few more useful functions that are inside of Python.

62
00:04:04,230 --> 00:04:06,930
One really useful one is range.

63
00:04:07,050 --> 00:04:16,470
A lot of times you're going to want to do a for loop something like this for x in the cue for sequence

64
00:04:17,010 --> 00:04:21,800
print X or remember as Q was just this one two three four five.

65
00:04:21,840 --> 00:04:25,920
A lot of times you're going to want to do something a certain amount of times.

66
00:04:25,980 --> 00:04:33,090
Now one way to do that is say for x in and then make a really long sequence but you don't have to want

67
00:04:33,090 --> 00:04:34,430
to type that much.

68
00:04:34,440 --> 00:04:42,630
So Python has a range function and range is going to be a generator of numerical values so if you say

69
00:04:43,350 --> 00:04:52,330
range you'll start with the number you want to start at and the number you want to end that if you run

70
00:04:52,330 --> 00:04:54,510
that you get this range object.

71
00:04:54,550 --> 00:05:06,460
And then what you can do is say for x in range from zero comma 5 colon prints X and then you will see

72
00:05:06,550 --> 00:05:12,240
0 1 2 3 4 and it is kind of a shorthand way to generate those values.

73
00:05:12,280 --> 00:05:21,820
It's a generator if you actually want this to be a list you would pass this in to the list function

74
00:05:21,880 --> 00:05:23,560
and that converts this into a list.

75
00:05:23,560 --> 00:05:29,500
Now I see a list of 0 1 2 3 4 and this is kind of a very quick way to actually execute something a certain

76
00:05:29,500 --> 00:05:30,690
number of times.

77
00:05:30,790 --> 00:05:39,550
So you can say then even at just one number range of 10 and by default the starting number is zero.

78
00:05:39,550 --> 00:05:42,580
So now this goes all the way up to 10 elements.

79
00:05:42,580 --> 00:05:45,820
But since it starts at zero it will end at nine.

80
00:05:45,810 --> 00:05:51,710
The reason being because 0 1 2 3 4 5 6 7 8 9 10 this is 10 elements.

81
00:05:51,750 --> 00:05:53,350
All right.

82
00:05:53,350 --> 00:05:55,750
That is the range function.

83
00:05:55,750 --> 00:06:03,010
Now let's go ahead and discuss list comprehension list comprehension allows you to save a bunch of writing

84
00:06:03,370 --> 00:06:06,790
when you're trying to create a for loop to create a list.

85
00:06:06,790 --> 00:06:10,960
Let me go ahead and show you an example of using that for a loop and then I'll show you an example of

86
00:06:10,960 --> 00:06:13,360
list comprehension in action.

87
00:06:13,360 --> 00:06:21,610
I'm going to do this I want to say x is equal to a list consisting of the numbers 1 2 3 4 and then I'm

88
00:06:21,610 --> 00:06:27,730
going to make an empty list out which is just a set of brackets so it's an empty list there's nothing

89
00:06:27,730 --> 00:06:28,730
in there.

90
00:06:29,010 --> 00:06:35,970
And then I will say for item in X and I'm going to go ahead and make this clear by just changing item

91
00:06:35,980 --> 00:06:36,910
to numb.

92
00:06:37,150 --> 00:06:46,540
So for now I'm in X I'm going to take my empty list out and I'm going to pends numb to that power of

93
00:06:46,620 --> 00:06:48,250
two.

94
00:06:48,370 --> 00:06:55,060
I run that cell and then I'm going to go ahead and print out that was that empty list.

95
00:06:55,360 --> 00:06:56,540
And notice what it has here.

96
00:06:56,560 --> 00:07:05,720
It basically has every number from X squared 1 4 9 16 instead of 1 2 3 for this sort of operation is

97
00:07:05,740 --> 00:07:11,500
so common in Python where you're continually appending a value to a list that Python has something called

98
00:07:11,620 --> 00:07:18,330
list comprehension and it's basically a way of instead of having to define a list and continually append

99
00:07:18,460 --> 00:07:22,780
logic to a list and use a for loop with Colon indentation.

100
00:07:22,780 --> 00:07:28,710
You can actually type all of this essentially into a set of brackets and quickly create a list.

101
00:07:28,720 --> 00:07:34,860
Let me go ahead and show you how to translate this for loop code into list comprehension lets comprehension

102
00:07:34,940 --> 00:07:36,000
is kind of a for loop.

103
00:07:36,000 --> 00:07:44,440
But backwards you end up saying what you want item is going to call it numb.

104
00:07:44,880 --> 00:07:53,260
So the power of two for numb in and then x number x is this list.

105
00:07:53,250 --> 00:07:56,360
And this is essentially the same code here.

106
00:07:56,810 --> 00:08:01,300
So when I run it it ends up working because it's all inside of brackets.

107
00:08:01,300 --> 00:08:08,230
Let me go to break down these steps again instead of saying this out append and this out empty list

108
00:08:08,560 --> 00:08:10,200
you'll just say something like.

109
00:08:10,500 --> 00:08:13,140
Out is equal to and then a set of brackets.

110
00:08:13,360 --> 00:08:18,280
And then you can translate this for loop into a list comprehension by breaking it down in the following

111
00:08:18,280 --> 00:08:18,940
manner.

112
00:08:19,000 --> 00:08:21,400
You'll grab everything before the colon.

113
00:08:21,390 --> 00:08:25,170
So for now I'm an X Copy and paste that.

114
00:08:25,500 --> 00:08:28,100
And then you will grab whatever we actually want to a pen.

115
00:08:28,140 --> 00:08:34,330
In this case that's number squared and put it in here before that for loop and this is it basically

116
00:08:34,410 --> 00:08:42,430
list comprehension you're saying Give me the numbers squared for nothing in X and now you can see that

117
00:08:42,460 --> 00:08:49,350
output has been cleared in one line so the list comprehension is just a way to save some typing for

118
00:08:49,360 --> 00:08:52,940
you if you're confused by the syntax here or just don't like it.

119
00:08:52,960 --> 00:08:54,650
And this is more readable for you.

120
00:08:54,700 --> 00:08:58,700
Go ahead and just use for loops of the pen for beginners with Python.

121
00:08:58,750 --> 00:09:03,270
This sort of syntax tends to be hard to read at first but as you gradually get better and better of

122
00:09:03,280 --> 00:09:09,960
Python you'll usually switch over to list comprehension just to have things in one simple line.

123
00:09:10,620 --> 00:09:11,290
OK.

124
00:09:11,530 --> 00:09:18,520
Now let's go ahead and talk about functions functions allow you to basically not have to continually

125
00:09:18,520 --> 00:09:23,740
write code over and over again you can just write it inside of a function and then call that function

126
00:09:23,740 --> 00:09:24,850
itself.

127
00:09:24,850 --> 00:09:36,490
The keyword for a function is DPF or Def and DCF allows you to define a function you'll say DPF space

128
00:09:36,640 --> 00:09:38,210
the name of your function.

129
00:09:38,320 --> 00:09:45,190
So go ahead and call this my underscore func and functions should start with lower case letters.

130
00:09:45,380 --> 00:09:54,850
You passen the parameters you want such as Parama one colon and then you'll go ahead and execute some

131
00:09:54,860 --> 00:10:00,410
sort of code so we can say go ahead and Prince Coram one.

132
00:10:00,990 --> 00:10:01,330
OK.

133
00:10:01,340 --> 00:10:04,020
This is a very simple function.

134
00:10:04,370 --> 00:10:15,890
We just call now my phunk passes the parameter such as Hello and it will run and prints the parameter

135
00:10:15,880 --> 00:10:16,420
.

136
00:10:16,420 --> 00:10:18,070
And that's my phunk.

137
00:10:18,640 --> 00:10:21,300
Let me go in and show you a more complicated example.

138
00:10:21,520 --> 00:10:25,580
Well go ahead and say my funk and a set of parameters.

139
00:10:25,730 --> 00:10:35,770
It's going to take a name and we'll say Prince and we'll say hello and we can use a plus sign of a string

140
00:10:35,840 --> 00:10:38,570
in order to concatenate two strings together.

141
00:10:38,650 --> 00:10:42,380
So this will say print Hello plus name.

142
00:10:42,550 --> 00:10:43,990
Go ahead and run that.

143
00:10:44,090 --> 00:10:46,830
And now for my flunk I'm going to pass on a name.

144
00:10:46,910 --> 00:10:50,220
It's going to Jose and now returns back.

145
00:10:50,440 --> 00:10:58,060
Hello Jose if you want a default value for one of these parameters so a default name you can just say

146
00:10:58,100 --> 00:11:04,720
equals and then whatever the primary you want to be the false name.

147
00:11:04,810 --> 00:11:11,610
And if I run that again and if I don't pasand anything to my phunk I will get.

148
00:11:11,620 --> 00:11:12,340
Hello.

149
00:11:12,400 --> 00:11:17,570
Default name only when I say Jose or some other name in there.

150
00:11:17,600 --> 00:11:22,110
Will it replace the default value with the value I specified.

151
00:11:22,120 --> 00:11:27,740
You can also say to more fully explain what you're passing into the functioning and say name is equal

152
00:11:27,740 --> 00:11:29,490
to and then the new value.

153
00:11:29,750 --> 00:11:32,210
Or as long as you put the values in the correct order.

154
00:11:32,260 --> 00:11:41,590
Doing it in this fashion of just one piece of just Jose like this is also fine.

155
00:11:41,710 --> 00:11:49,900
Something to note here is if you just call with parentheses my phunk it will execute the function.

156
00:11:50,330 --> 00:11:54,910
If you get rid of those parentheses you will not call the function.

157
00:11:54,910 --> 00:11:58,120
You will just ask Python hey what is this object.

158
00:11:58,150 --> 00:11:59,320
And it will report back.

159
00:11:59,500 --> 00:12:00,780
Oh that's an object.

160
00:12:00,830 --> 00:12:04,440
A main function called my underscore func.

161
00:12:04,450 --> 00:12:08,920
So keep that in mind there's a difference between calling my underscore phunk like this.

162
00:12:08,920 --> 00:12:16,530
This is the actual function closing the princes off of it actually executes that function.

163
00:12:16,540 --> 00:12:22,320
Now right now we should very simple functions that just print out a statement but a lot of times you'll

164
00:12:22,370 --> 00:12:26,330
actually want to return a value so you can set it equal to another variable.

165
00:12:26,330 --> 00:12:27,820
Let me show you what I mean by that.

166
00:12:28,100 --> 00:12:36,160
Well go ahead and say DPF and create a function called Square that takes in some and U-M some number

167
00:12:36,670 --> 00:12:39,440
colon and then it will return that number.

168
00:12:39,430 --> 00:12:45,250
It won't just print out the result or return the square of that number and you can use the keyword return

169
00:12:45,310 --> 00:12:46,650
in order to do that.

170
00:12:46,730 --> 00:12:51,180
So you'll return numb to the power of two.

171
00:12:51,380 --> 00:12:58,420
And so then I can say output is equal to square of two.

172
00:12:58,960 --> 00:13:03,780
And then when I go ahead and check what output is it's for.

173
00:13:03,860 --> 00:13:08,260
And that's the difference between printing something and returning something.

174
00:13:08,260 --> 00:13:12,080
When you returned this you're going to want to set it equal to some other variable.

175
00:13:12,230 --> 00:13:17,290
And that way you can call the results in that variable versus when you're printing something you're

176
00:13:17,290 --> 00:13:22,580
just going to print a value but not actually return it or store it anywhere.

177
00:13:22,580 --> 00:13:28,360
Finally something you should know about functions is that they can have documentation strings you can

178
00:13:28,370 --> 00:13:37,630
add the documentation string to a function by putting in a set of triple enclosing quotes and tripling

179
00:13:37,810 --> 00:13:38,770
closing quotes.

180
00:13:38,770 --> 00:13:48,160
Basically allows you to put in a giant string over multiple lines so we can say this is a docstring

181
00:13:48,620 --> 00:13:51,060
and this is essentially just a really long comments.

182
00:13:51,070 --> 00:13:54,260
So this is like multi-line comments.

183
00:13:54,260 --> 00:14:05,960
You can go multiple lines and we'll go ahead and say this function squares a number.

184
00:14:06,160 --> 00:14:07,340
So I run that.

185
00:14:07,420 --> 00:14:13,060
Now I have the documentation string inside square if I just run Square again nothing is going to change

186
00:14:13,540 --> 00:14:18,500
what will change is when they actually call the documentation string for more information about this

187
00:14:18,500 --> 00:14:19,390
function.

188
00:14:19,480 --> 00:14:22,830
Jupiter notebook has a really great ability to do this.

189
00:14:22,880 --> 00:14:27,650
You start typing the function you wants and then move your cursor at the end of that function.

190
00:14:27,650 --> 00:14:34,270
You click shift tab and you will get a signature call of the actual function.

191
00:14:34,420 --> 00:14:36,700
Meaning what the function expects to receive.

192
00:14:36,880 --> 00:14:40,860
And then you can expand this to get the documentation string.

193
00:14:40,880 --> 00:14:44,150
And it says this is the docstring can go multiple lines.

194
00:14:44,140 --> 00:14:49,750
This function Square is a number and that's going to be really useful not just so much for your own

195
00:14:49,750 --> 00:14:54,010
functions but for functions that are already built into the libraries that we're going to be learning

196
00:14:54,010 --> 00:14:54,530
.

197
00:14:54,560 --> 00:15:01,360
For instance if we go back to when we were discussing range here you might think it's a little weird

198
00:15:01,370 --> 00:15:04,640
and you might have to memorize stuff as far as what numbers go where.

199
00:15:04,660 --> 00:15:11,950
Well if you're using you Brunow book you can just type in range shift tab and notice it gives you the

200
00:15:11,950 --> 00:15:17,030
signature and then it also has the docstring where you basically say range stop.

201
00:15:17,020 --> 00:15:20,890
And it gives you a range object or you can say range and then start and stop.

202
00:15:20,980 --> 00:15:25,690
And it gives you more information like returns an object that produces a sequence of integers etc. and

203
00:15:25,690 --> 00:15:27,520
has a lot more information there for you.

204
00:15:27,560 --> 00:15:30,580
And this is the sort of thing we're going to be using all the time throughout this course.

205
00:15:30,670 --> 00:15:34,090
This quick access a documentation strings.

206
00:15:34,100 --> 00:15:34,700
All right.

207
00:15:34,930 --> 00:15:36,740
Well go ahead and end it there.

208
00:15:36,770 --> 00:15:42,470
We're going to discuss in the next section of this lecture series Arlanda expressions using map and

209
00:15:42,460 --> 00:15:47,330
filter and methods that you can use on common data type objects.

210
00:15:47,330 --> 00:15:48,010
All right.

211
00:15:48,010 --> 00:15:52,550
Let me go out and quickly review everything that went over in this lecture.

212
00:15:52,660 --> 00:15:54,430
We went over how to create a function.

213
00:15:54,460 --> 00:15:59,590
The key word is if you pass in the name of your function and then you can pass in the parameters your

214
00:15:59,620 --> 00:16:01,420
function expects to get.

215
00:16:01,420 --> 00:16:06,130
And then the documentation string for them you want to use return if you want to actually return the

216
00:16:06,130 --> 00:16:08,160
value of that function.

217
00:16:08,190 --> 00:16:13,760
Remember the difference between calling the function of parentheses or without the function with parentheses

218
00:16:13,750 --> 00:16:13,770
.

219
00:16:13,780 --> 00:16:15,830
You can just get the function itself.

220
00:16:16,390 --> 00:16:21,170
We also learned about miscomprehension which kind of breaks down the sort of for loop into a single

221
00:16:21,160 --> 00:16:23,470
line inside of these brackets.

222
00:16:23,470 --> 00:16:28,420
Then we learned about range which allows you to quickly create a list of a sequence of integers from

223
00:16:28,420 --> 00:16:30,850
a start to a stop point.

224
00:16:31,210 --> 00:16:35,610
We learned about four loops and while loops as well.

225
00:16:36,010 --> 00:16:38,870
All right thanks everyone and I'll see you at the next lecture
