1
00:00:05,520 --> 00:00:09,570
皆さん、こんにちは皆さん、そしてPythonのクラッシュコースの第3回を歓迎します。

2
00:00:09,570 --> 00:00:13,470
私たちが最後に打ち切った木星のノートにすぐに戻って行きましょう。

3
00:00:13,470 --> 00:00:13,710
大丈夫。

4
00:00:13,710 --> 00:00:15,260
ここで私は木星ノートブックにいます。

5
00:00:15,270 --> 00:00:18,680
前回は、elifとLのステートメントを実行していました。

6
00:00:18,810 --> 00:00:25,350
今私たちは行くつもりでループをカバーし、whileループではシーケンスを反復することができます。私はシーケンスのためにS-C

7
00:00:25,410 --> 00:00:33,770
Qというオブジェクトを作るつもりです。

8
00:00:34,380 --> 00:00:35,860
それは数字のリストに過ぎません。

9
00:00:36,000 --> 00:00:41,310
そして、私はforループを使用して、そのシーケンス内のすべての単一項目に対していくつかのコードブロックを実行または実行することができます。

10
00:00:41,310 --> 00:00:42,290
&nbsp;

11
00:00:42,570 --> 00:00:44,410
あなたはこれのために何かをすることができるという意味です。

12
00:00:44,430 --> 00:00:45,880
それがここのキーワードです。

13
00:00:46,260 --> 00:00:53,070
item inの場合、キューとしてのシーケンスであるそのオブジェクトは、コードブロックを実行または実行します。

14
00:00:53,790 --> 00:00:57,490
この場合、それはプリントアイテムになります。

15
00:00:57,840 --> 00:01:04,590
そして、私はそのシーケンスの各要素の項目を印刷することができました。ここで注意すべき点は、この一時的な変数名項目はあなたが望むものであればどんなものでもかまいません。

16
00:01:04,590 --> 00:01:08,850
&nbsp;

17
00:01:08,850 --> 00:01:14,600
例えば、私は先に進んでこれをゼリーのようなものに置き換えることができます。それはまだ機能します。

18
00:01:14,850 --> 00:01:22,050
だからゼリーのためのシーケンスまたはCQのプリントゼリーとそこにあなたはそれがまったく同じものです。

19
00:01:22,230 --> 00:01:25,850
したがって、おそらくこれらの単語や一時変数名を選択することになります。

20
00:01:25,850 --> 00:01:27,660
慎重にここに。

21
00:01:27,660 --> 00:01:28,550
これらは数字です。

22
00:01:28,590 --> 00:01:34,590
&nbsp;

23
00:01:34,590 --> 00:01:40,170
&nbsp;

24
00:01:40,290 --> 00:01:45,720
だから、良い選択は何かのようなものかもしれませんし、数字のためのMと、後でこのコードを戻すときには、私が実際に何をしているのか思い出して何かを覚えることができます。実際にシーケンス内の項目に関連する必要はありません。

25
00:01:45,720 --> 00:01:46,680
&nbsp;

26
00:01:46,680 --> 00:01:51,070
あなたはここで何でもできますので、こんにちは。

27
00:01:51,570 --> 00:01:56,130
そして、それはちょうど行くつもりとここで私はちょうど5回、こんにちは印刷するつもりですこのアクションを実行するつもりすべての要素のためにOKと言うだろう。

28
00:01:56,130 --> 00:01:59,210
&nbsp;

29
00:01:59,210 --> 00:02:04,650
次に、ある条件が満たされるまで、whileループを使用してアクションを継続的に実行する方法について説明します。

30
00:02:04,650 --> 00:02:06,910
&nbsp;

31
00:02:07,080 --> 00:02:18,750
&nbsp;

32
00:02:18,750 --> 00:02:24,630
私は先に進もうとしています。タイプIは1に等しいですし、私が5コロン未満であると言うと、この条件が真実である間にいくつかのブロックを実行するつもりです。私はコロンの中括弧で書かれています。

33
00:02:24,630 --> 00:02:35,240
&nbsp;

34
00:02:35,250 --> 00:02:40,740
今はまだこれを実行しないでください。何が起きるか見てみましょう。私は目を1と同じにしてから、私はOKと言いました。私は5歳未満です。

35
00:02:40,740 --> 00:02:42,890
&nbsp;

36
00:02:43,020 --> 00:02:44,260
これを印刷してください。

37
00:02:44,340 --> 00:02:50,820
私がちょうどこれをうまく実行すれば、私はいつも5未満になるので、セルはちょうど永遠に続くという無限のループを得るでしょう。

38
00:02:50,820 --> 00:02:52,380
&nbsp;

39
00:02:52,710 --> 00:02:57,900
もしあなたがセルを持ってしまったのであれば、それは偶然にも永遠にしか動かず、出力が絶えず得られたり、非常に長い間番号の代わりにアスタリスクをつけたりすることによって気づくでしょう。

40
00:02:57,900 --> 00:03:02,870
&nbsp;

41
00:03:02,880 --> 00:03:09,640
あなたは、この問題を避けるために大佐に行ってから、再起動をクリックしてください。

42
00:03:09,690 --> 00:03:14,460
なぜプラス1に等しいと言いますか？

43
00:03:14,490 --> 00:03:18,320
そして今私がこれを実行すると、このコードブロックが実行されます。

44
00:03:18,390 --> 00:03:22,110
だから私は私が最初に与えた価値であったから始まります。

45
00:03:22,170 --> 00:03:25,140
その後、目1を印刷し、1を追加しました。

46
00:03:25,170 --> 00:03:29,130
私はその後、whileループが再び5未満にokをチェックしました。

47
00:03:29,130 --> 00:03:30,180
まあそれは本当です。

48
00:03:30,180 --> 00:03:34,390
だから、それに1を加えると、それより5つよりも少ない3の印が追加されます。

49
00:03:34,410 --> 00:03:35,500
まあそれは本当です。

50
00:03:35,540 --> 00:03:36,700
プリンスには3つあります。

51
00:03:36,720 --> 00:03:39,170
それに1を加えることは5未満です。

52
00:03:39,180 --> 00:03:39,850
それは本当だ。

53
00:03:39,870 --> 00:03:42,480
プリンスはそれに1を加えたものです。

54
00:03:42,480 --> 00:03:44,700
そして、ついには5人に満たない5人です。

55
00:03:44,700 --> 00:03:45,920
まあ、それは当てはまりません。

56
00:03:45,990 --> 00:03:49,500
だから、私は先に進み、ちょうど終了し、そのループから勃発した。

57
00:03:49,620 --> 00:03:51,330
そしてそれがwhileループの仕組みです。

58
00:03:51,420 --> 00:03:58,410
基本的にいくつかの条件が真である間にコードブロックを実行します。

59
00:03:58,430 --> 00:04:04,230
さあ、Pythonの中にある便利な関数をいくつか議論しましょう。

60
00:04:04,230 --> 00:04:06,930
本当に便利なのは範囲です。

61
00:04:07,050 --> 00:04:16,470
たくさんの時間あなたはforループをしたいと思っています。これは、シーケンスプリントXのためのキューにxのために何かこれを書いたり、Qがちょうどこの2つ3つ4つ5つだったことを覚えています。

62
00:04:17,010 --> 00:04:21,800
&nbsp;

63
00:04:21,840 --> 00:04:25,920
あなたは何度か何かをやりたいと思っています。

64
00:04:25,980 --> 00:04:33,090
これを行う方法の1つは、x inについて言い、次に本当に長いシーケンスを作ることですが、それほど多く入力する必要はありません。

65
00:04:33,090 --> 00:04:34,430
&nbsp;

66
00:04:34,440 --> 00:04:42,630
&nbsp;

67
00:04:43,350 --> 00:04:52,330
&nbsp;

68
00:04:52,330 --> 00:04:54,510
だからPythonは範囲関数を持っていて、範囲は数値のジェネレータになるでしょう。あなたが範囲と言うなら、あなたはあなたがこの範囲を得ることを実行するなら、あなたが終了したい数値と開始したい数値から始めますオブジェクト。

69
00:04:54,550 --> 00:05:06,460
そして、あなたができることは、ゼロのカンマからコロンで区切られたxについてです。コロンがXを印刷し、次に0 1 2

70
00:05:06,550 --> 00:05:12,240
3 4が表示され、これらの値を生成するための簡略な方法です。

71
00:05:12,280 --> 00:05:21,820
実際にこれをリスト関数に渡してリストに変換したい場合は、ジェネレータです。これをリストに変換します。

72
00:05:21,880 --> 00:05:23,560
&nbsp;

73
00:05:23,560 --> 00:05:29,500
今、私は0 1 2 3

74
00:05:29,500 --> 00:05:30,690
4のリストを見ています。これは実際に何かを何回か実行する非常に速い方法です。

75
00:05:30,790 --> 00:05:39,550
したがって、10の1つの数値範囲でさえ、デフォルトでは開始数はゼロです。

76
00:05:39,550 --> 00:05:42,580
だから今これは最大10要素までです。

77
00:05:42,580 --> 00:05:45,820
しかし、ゼロから始まるので、9時に終了します。

78
00:05:45,810 --> 00:05:51,710
その理由は、0 1 2 3 4 5 6 7 8 9 10これは10要素であるからです。

79
00:05:51,750 --> 00:05:53,350
大丈夫。

80
00:05:53,350 --> 00:05:55,750
それが範囲関数です。

81
00:05:55,750 --> 00:06:03,010
ここでは、リストの理解を議論しましょう。リストの理解は、forループを作成してリストを作成しようとしているときに、たくさんの文章を保存することができます。

82
00:06:03,370 --> 00:06:06,790
&nbsp;

83
00:06:06,790 --> 00:06:10,960
ループに使用する例を示しておきましょう。次に、リストの理解の例を実際に表示します。

84
00:06:10,960 --> 00:06:13,360
&nbsp;

85
00:06:13,360 --> 00:06:21,610
私はこれを行うつもりです。私はxが数字1 2

86
00:06:21,610 --> 00:06:27,730
3 4で構成されるリストと等しいことを言いたいと思います。空のリストを作るつもりです。それは括弧のセットですので空リストですそこには何もない。

87
00:06:27,730 --> 00:06:28,730
&nbsp;

88
00:06:29,010 --> 00:06:35,970
そして、私はXの項目について言いますが、私は先に進んで、項目を麻痺させるだけでこれを明確にします。

89
00:06:35,980 --> 00:06:36,910
&nbsp;

90
00:06:37,150 --> 00:06:46,540
だから今私はXで私の空リストを取るつもりだと私は2のその力に麻痺するつもりです。

91
00:06:46,620 --> 00:06:48,250
&nbsp;

92
00:06:48,370 --> 00:06:55,060
私はそのセルを走らせて、それから先に進み、その空リストを印刷します。

93
00:06:55,360 --> 00:06:56,540
それがここにあることに気づく。

94
00:06:56,560 --> 00:07:05,720
2 3の代わりにX

95
00:07:05,740 --> 00:07:11,500
2乗1 4

96
00:07:11,620 --> 00:07:18,330
9 16からのすべての数字を持っています。この種の操作はPythonでよく使われていますので、リストに値を続けて追加するとリストの理解と呼ばれるものがあります。リストを定義してロジックを継続的にリストに追加し、コロンインデントでforループを使用する必要はありません。

97
00:07:18,460 --> 00:07:22,780
これは基本的に1

98
00:07:22,780 --> 00:07:28,710
実際には、すべてを本質的に括弧のセットに入力して、リストをすばやく作成することができます。

99
00:07:28,720 --> 00:07:34,860
ループのコードをリストの理解に変換する方法を説明して、理解はループの一種です。

100
00:07:34,940 --> 00:07:36,000
&nbsp;

101
00:07:36,000 --> 00:07:44,440
しかし、あなたは、あなたがアイテムがそれを麻痺と呼ぶことを望むものを言ってしまうことになります。

102
00:07:44,880 --> 00:07:53,260
だから麻痺してからx番号xの2つの力はこのリストです。

103
00:07:53,250 --> 00:07:56,360
これは本質的に同じコードです。

104
00:07:56,810 --> 00:08:01,300
だから私はそれを実行すると、それはすべての括弧の中にあるので、仕事を終える。

105
00:08:01,300 --> 00:08:08,230
これらのステップをもう一度壊して、これを追加して、これを空リストにして、あなたのようなことを言ってみてください。

106
00:08:08,560 --> 00:08:10,200
&nbsp;

107
00:08:10,500 --> 00:08:13,140
Outはブラケットと等しく、ブラケットのセットです。

108
00:08:13,360 --> 00:08:18,280
そして、あなたは次のようにそれを分解することによって、ループのためにこれをリストの理解に翻訳することができます。

109
00:08:18,280 --> 00:08:18,940
&nbsp;

110
00:08:19,000 --> 00:08:21,400
あなたは結腸の前にすべてをつかむでしょう。

111
00:08:21,390 --> 00:08:25,170
だから、今はXコピーして貼り付けています。

112
00:08:25,500 --> 00:08:28,100
そして、あなたが実際にペンに欲しいものをつかむでしょう。

113
00:08:28,140 --> 00:08:34,330
&nbsp;

114
00:08:34,410 --> 00:08:42,430
&nbsp;

115
00:08:42,460 --> 00:08:49,350
&nbsp;

116
00:08:49,360 --> 00:08:52,940
この場合、数値は二乗され、その前にループの前に置かれます。これは基本的にあなたが言っているリストの理解です.Xで何もない二乗の数値を与えて、今度は出力が1行でクリアされるのを見ることができます。リストの理解は、あなたがここの構文で混乱している場合や、好きではない場合は、あなたのためにいくつかのタイプを保存するための単なる方法です。

117
00:08:52,960 --> 00:08:54,650
そして、これはあなたにとってもっと読みやすいです。

118
00:08:54,700 --> 00:08:58,700
先に進んで、Pythonの初心者のためにペンのループを使用してください。

119
00:08:58,750 --> 00:09:03,270
&nbsp;

120
00:09:03,280 --> 00:09:09,960
この種の構文は、最初は読みにくい傾向がありますが、徐々にPythonの方が良くなっていくにつれ、通常は単純な行に物事を載せるためにリストの理解に切り替わります。

121
00:09:10,620 --> 00:09:11,290
OK。

122
00:09:11,530 --> 00:09:18,520
ここでは、関数関数について説明しましょう。基本的に、コードを何度も繰り返し書く必要はありません。関数の中に書くだけで、関数自体を呼び出すことができます。

123
00:09:18,520 --> 00:09:23,740
&nbsp;

124
00:09:23,740 --> 00:09:24,850
&nbsp;

125
00:09:24,850 --> 00:09:36,490
ファンクションのキーワードはDPFまたはDefで、DCFではDPFのスペースにファンクションの名前を指定する関数を定義できます。

126
00:09:36,640 --> 00:09:38,210
&nbsp;

127
00:09:38,320 --> 00:09:45,190
だから、これを私のアンダースコア関数と呼び、関数は小文字で始めるべきです。

128
00:09:45,380 --> 00:09:54,850
Princeを呼び出します。

129
00:09:54,860 --> 00:10:00,410
あなたはParamaのコロンなどの必要なパラメータを渡します。次に、何らかのコードを実行して、先に進んでCoram

130
00:10:00,990 --> 00:10:01,330
OK。

131
00:10:01,340 --> 00:10:04,020
これは非常に単純な関数です。

132
00:10:04,370 --> 00:10:15,890
私のphunkはHelloのようなパラメータを渡し、パラメータを実行して出力します。

133
00:10:16,420 --> 00:10:18,070
それは私のファンクです。

134
00:10:18,640 --> 00:10:21,300
私に入って、あなたにもっと複雑な例を見せてください。

135
00:10:21,520 --> 00:10:25,580
さて、私のファンクと一連のパラメータを言いましょう。

136
00:10:25,730 --> 00:10:35,770
それは名前を取るつもりです、我々は王子と言うでしょう、私たちはこんにちはと言うだろうと我々は文字列のプラス記号を使用して2つの文字列を一緒に連結することができます。

137
00:10:35,840 --> 00:10:38,570
&nbsp;

138
00:10:38,650 --> 00:10:42,380
これは、Helloと名前を印刷することを意味します。

139
00:10:42,550 --> 00:10:43,990
それを実行してください。

140
00:10:44,090 --> 00:10:46,830
そして今、私の暴行のために、私は名前を渡すつもりです。

141
00:10:46,910 --> 00:10:50,220
それはホセに行き、今戻ってきます。

142
00:10:50,440 --> 00:10:58,060
こんにちはホゼス場合は、これらのパラメータのいずれかのデフォルトの値をしたいので、あなたはちょうどあなたが偽の名前になりたいプライマリと等しいと言うことができるデフォルトの名前。

143
00:10:58,100 --> 00:11:04,720
&nbsp;

144
00:11:04,810 --> 00:11:11,610
私がそれをやり直すと、私がファンクに何かパッサンドしていなければ、私は得るでしょう。

145
00:11:11,620 --> 00:11:12,340
こんにちは。

146
00:11:12,400 --> 00:11:17,570
デフォルト名は、私がそこにJoseまたは他の名前を言うときだけです。

147
00:11:17,600 --> 00:11:22,110
デフォルト値を指定した値に置き換えますか？

148
00:11:22,120 --> 00:11:27,740
あなたは、あなたが機能に渡っているものをより完全に説明して、名前が同じで、新しい価値を言うと言うこともできます。

149
00:11:27,740 --> 00:11:29,490
&nbsp;

150
00:11:29,750 --> 00:11:32,210
または、正しい順序で値を入力している限りです。

151
00:11:32,260 --> 00:11:41,590
これのようなちょうど1つのホーズのこのようなやり方でやっても大丈夫です。

152
00:11:41,710 --> 00:11:49,900
ここで注意すべき点は、私のファンクをカッコで呼び出すだけで、関数を実行するということです。

153
00:11:50,330 --> 00:11:54,910
これらのカッコを取り除くと、関数を呼び出さなくなります。

154
00:11:54,910 --> 00:11:58,120
あなたはこのオブジェクトが何であるかPythonにちょっと尋ねます。

155
00:11:58,150 --> 00:11:59,320
それが報告されます。

156
00:11:59,500 --> 00:12:00,780
ああ、それはオブジェクトです。

157
00:12:00,830 --> 00:12:04,440
私のアンダースコア関数と呼ばれる主な機能。

158
00:12:04,450 --> 00:12:08,920
ですから、このように私のアンダースコアのファンクを呼び出すことには違いがあることを覚えておいてください。

159
00:12:08,920 --> 00:12:16,530
これは、実際にその関数を実行して、その関数を実際に実行するプリンスを閉じます。

160
00:12:16,540 --> 00:12:22,320
さて、今は文を出力するだけの非常にシンプルな関数を使うべきですが、実際には値を返すことが多いので、別の変数と同じように設定することができます。

161
00:12:22,370 --> 00:12:26,330
&nbsp;

162
00:12:26,330 --> 00:12:27,820
私がそれを意味するものを見せてあげましょう。

163
00:12:28,100 --> 00:12:36,160
さて、DPFと言ってSquareと呼ばれる関数を作成し、いくつかのU-Mをいくつかのコロンを入れて、それを返します。

164
00:12:36,670 --> 00:12:39,440
&nbsp;

165
00:12:39,430 --> 00:12:45,250
結果をプリントアウトするか、その番号の2乗を返すだけでなく、それを行うためにキーワードreturnを使うことができます。

166
00:12:45,310 --> 00:12:46,650
&nbsp;

167
00:12:46,730 --> 00:12:51,180
だから、あなたは2の威力に麻痺します。

168
00:12:51,380 --> 00:12:58,420
それで出力は2の2乗に等しいと言うことができます。

169
00:12:58,960 --> 00:13:03,780
そして、私が先に進んで、それが何のための出力であるかをチェックします。

170
00:13:03,860 --> 00:13:08,260
そして、それは何かを印刷して何かを返すことの違いです。

171
00:13:08,260 --> 00:13:12,080
これを返すと、他の変数と同じにしたいと思うでしょう。

172
00:13:12,230 --> 00:13:17,290
&nbsp;

173
00:13:17,290 --> 00:13:22,580
そしてその方法では、値を印刷するだけで何かを印刷していても、実際にはそれを返すか、どこにでも保存することはできません。

174
00:13:22,580 --> 00:13:28,360
&nbsp;

175
00:13:28,370 --> 00:13:37,630
最後に、関数について知っておくべきことは、ドキュメンテーション文字列を持つことができるということです。関数にドキュメンテーション文字列を追加するには、トリプル囲み引用符と3重引用符を入れます。

176
00:13:37,810 --> 00:13:38,770
&nbsp;

177
00:13:38,770 --> 00:13:48,160
基本的には複数の行に巨大な文字列を入れることができるので、これはdocstringだと言うことができます。これは基本的には本当に長いコメントです。

178
00:13:48,620 --> 00:13:51,060
&nbsp;

179
00:13:51,070 --> 00:13:54,260
これは複数行のコメントのようなものです。

180
00:13:54,260 --> 00:14:05,960
複数の行に行くことができます。そして、この関数が数字を四角いと言うでしょう。

181
00:14:06,160 --> 00:14:07,340
だから私はそれを実行する。

182
00:14:07,420 --> 00:14:13,060
&nbsp;

183
00:14:13,540 --> 00:14:18,500
&nbsp;

184
00:14:18,500 --> 00:14:19,390
Squareをもう一度実行すると、ドキュメントの文字列が正方形の中にあります。変更するものは、実際にドキュメントの文字列を呼び出すときに変わるものは何もありません。

185
00:14:19,480 --> 00:14:22,830
木星ノートブックはこれを行うには本当に素晴らしい能力を持っています。

186
00:14:22,880 --> 00:14:27,650
必要な機能の入力を開始し、その機能の最後にカーソルを移動します。

187
00:14:27,650 --> 00:14:34,270
[Shift]タブをクリックすると、実際の関数の署名呼び出しが表示されます。

188
00:14:34,420 --> 00:14:36,700
関数が受け取ることを意味するもの。

189
00:14:36,880 --> 00:14:40,860
そして、これを展開してドキュメンテーション文字列を取得することができます。

190
00:14:40,880 --> 00:14:44,150
そして、これはdocstringが複数の行になることができると言います。

191
00:14:44,140 --> 00:14:49,750
この関数Squareは数値であり、それは自分の関数だけでなく、すでに学習しているライブラリに組み込まれている関数にとっても、本当に便利になるでしょう。

192
00:14:49,750 --> 00:14:54,010
&nbsp;

193
00:14:54,560 --> 00:15:01,360
たとえば、ここで範囲を議論していたときに戻ってくると、それはちょっと変わったと思うかもしれません。数字がどこに行くのかを覚えておかなければならないかもしれません。

194
00:15:01,370 --> 00:15:04,640
&nbsp;

195
00:15:04,660 --> 00:15:11,950
あなたがBrunowの本を使用しているならば、あなたはちょうどレンジシフトタブをタイプすることができ、それがあなたに署名を与えていることに気づく。そしてそれはまた、あなたが基本的に範囲停止を言うdocstringを持っている。

196
00:15:11,950 --> 00:15:17,030
&nbsp;

197
00:15:17,020 --> 00:15:20,890
そしてそれはあなたに範囲オブジェクトを与えるか、範囲と言うことができ、次に開始し、停止することができます。

198
00:15:20,980 --> 00:15:25,690
そして、整数のシーケンスなどを生成するオブジェクトを返すような情報を与えます。 そこにはさらに多くの情報があります。

199
00:15:25,690 --> 00:15:27,520
&nbsp;

200
00:15:27,560 --> 00:15:30,580
そして、これは私たちがこのコースを通して常に使用していることのようなものです。

201
00:15:30,670 --> 00:15:34,090
このクイックアクセスはドキュメントの文字列です。

202
00:15:34,100 --> 00:15:34,700
大丈夫。

203
00:15:34,930 --> 00:15:36,740
さて、そこに行きましょう。

204
00:15:36,770 --> 00:15:42,470
この講義シリーズの次のセクションでは、マップとフィルタを使用したArlandaの式と、共通のデータ型オブジェクトで使用できるメソッドについて説明します。

205
00:15:42,460 --> 00:15:47,330
&nbsp;

206
00:15:47,330 --> 00:15:48,010
大丈夫。

207
00:15:48,010 --> 00:15:52,550
私は外に出て、この講義で終わったすべてをすぐに見直しましょう。

208
00:15:52,660 --> 00:15:54,430
私たちは関数を作成する方法を調べました。

209
00:15:54,460 --> 00:15:59,590
キーワードは、関数の名前を渡した後、関数が取得することを期待するパラメータを渡すことができます。

210
00:15:59,620 --> 00:16:01,420
&nbsp;

211
00:16:01,420 --> 00:16:06,130
そして、実際にその関数の値を返す場合は、使用したいドキュメンテーション文字列を返します。

212
00:16:06,130 --> 00:16:08,160
&nbsp;

213
00:16:08,190 --> 00:16:13,760
括弧の機能を呼び出す方法と括弧で機能を使用する方法の違いを覚えておいてください。

214
00:16:13,780 --> 00:16:15,830
関数自体を取得することができます。

215
00:16:16,390 --> 00:16:21,170
また、どのような種類のforループをこれらの括弧内の単一の行に分解するかについての誤解についても学びました。

216
00:16:21,160 --> 00:16:23,470
&nbsp;

217
00:16:23,470 --> 00:16:28,420
次に、開始点から終了点までの一連の整数のリストをすばやく作成できる範囲について学習しました。

218
00:16:28,420 --> 00:16:30,850
&nbsp;

219
00:16:31,210 --> 00:16:35,610
我々は約4つのループとwhileループについても学びました。

220
00:16:36,010 --> 00:16:38,870
皆さんありがとうございました。次の講演でお会いしましょう。
