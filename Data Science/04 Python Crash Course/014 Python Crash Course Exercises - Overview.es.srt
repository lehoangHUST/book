1
00:00:05,340 --> 00:00:11,400
Hola a todos y bienvenidos a la conferencia sobre el resumen del ejercicio del curso intensivo de Python en esta

2
00:00:11,400 --> 00:00:15,560
conferencia, obtenemos una breve descripción del cuaderno de ejercicios y cómo abordar el ejercicio.

3
00:00:15,570 --> 00:00:18,250
Déjame seguir y mostrarte dónde puedes encontrar el cuaderno de ejercicios.

4
00:00:18,530 --> 00:00:25,490
OK, aquí estoy en su repositorio debajo de la carpeta del curso intensivo python verá tres cuadernos.

5
00:00:25,510 --> 00:00:30,760
El curso acelerado de Python que contiene las notas que acabamos de leer en la serie de cuatro partes.

6
00:00:30,930 --> 00:00:35,380
Luego tienes ejercicios de curso intensivo Python IPY y B.

7
00:00:35,550 --> 00:00:39,690
Este es el archivo de computadora portátil que vamos a utilizar para los ejercicios y verá el cuaderno

8
00:00:39,780 --> 00:00:40,280
de soluciones.

9
00:00:40,290 --> 00:00:46,580
Aquí entras y haces clic en el cuaderno de ejercicios donde deberías ver un cuaderno que se ve así.

10
00:00:46,590 --> 00:00:50,850
Y de nuevo, esto es solo un ejercicio opcional que prueba tu comprensión de los principios básicos de Python.

11
00:00:50,850 --> 00:00:55,920
Si considera que este ejercicio es extremadamente desafiante, probablemente aún no esté preparado para el resto del

12
00:00:55,940 --> 00:00:58,700
curso y no tenga suficiente experiencia en programación para continuar.

13
00:00:58,900 --> 00:01:03,300
Y sugeriría que tomes otro curso más orientado a principiantes completos, como

14
00:01:03,300 --> 00:01:06,030
el campamento de entrenamiento completo de Python.

15
00:01:06,160 --> 00:01:10,230
Sin embargo, estos ejercicios deben ser bastante simples y directos.

16
00:01:10,230 --> 00:01:14,350
Por ejemplo, este primero te pregunta qué tiene 7 para el poder de.

17
00:01:14,460 --> 00:01:20,790
Así que con un poco de suerte, puede ver la respuesta aquí como salida que vendría a esta celda o cualquier

18
00:01:20,790 --> 00:01:23,900
ID que prefiera usar y usar Python para responder esta pregunta.

19
00:01:23,910 --> 00:01:29,340
Entonces solo debes recordar bien cómo haces una potencia exponencial en Python.

20
00:01:29,340 --> 00:01:34,110
Te seguiré haciendo otras preguntas, como dividir la cadena en una lista, así que con suerte

21
00:01:34,110 --> 00:01:38,430
recordar cómo dividir una cadena con algún método particular en una lista y así sucesivamente.

22
00:01:38,430 --> 00:01:39,570
Así que adelante.

23
00:01:39,580 --> 00:01:42,030
Hay ejemplos de salida de lo que debería obtener.

24
00:01:42,210 --> 00:01:45,540
Luego tiene una pregunta que pregunta cuál es la principal diferencia entre una tupla y una lista.

25
00:01:45,540 --> 00:01:49,050
De esta manera, puedes responder en voz alta, no es la escritura. Creo que no hay

26
00:01:49,050 --> 00:01:50,650
un código para esto, solo pregunta qué diferencias.

27
00:01:50,850 --> 00:01:55,290
A continuación, deseo que cree una función que capture el dominio del sitio web de correo electrónico de una cadena y un usuario

28
00:01:55,290 --> 00:01:56,850
de formulario en el punto com del dominio.

29
00:01:56,850 --> 00:02:02,490
Entonces, si tiene una función, llámela de la misma manera que obtiene el dominio, debería poder pasar una

30
00:02:02,550 --> 00:02:06,150
cadena de este formato y simplemente tomar este dominio punto com.

31
00:02:06,180 --> 00:02:08,640
Entonces entra y crea algún tipo de función.

32
00:02:08,700 --> 00:02:14,540
dirección de correo electrónico y devuelve el dominio obtenido del sitio web que ese correo electrónico aloja.

33
00:02:14,540 --> 00:02:18,850
Puede salir y llamarlo get de dominio que toma en una cadena una

34
00:02:18,930 --> 00:02:23,910
Luego, continuará y creará una función básica que devuelve verdadero si la palabra perro está contenida en

35
00:02:23,910 --> 00:02:25,050
la secuencia de entrada.

36
00:02:25,200 --> 00:02:29,250
Y no quiero que tenga que preocuparse por los casos extremos como la puntuación que se adjunta a

37
00:02:29,670 --> 00:02:31,620
la palabra perro, pero tienen en cuenta las mayúsculas.

38
00:02:31,620 --> 00:02:35,990
De nuevo, no estamos lidiando con todos los casos extremos que pueda encontrar.

39
00:02:36,000 --> 00:02:42,690
Simplemente la idea básica de buscar una cadena para una palabra, entonces queremos que cree una función que pueda contar de qué manera

40
00:02:42,830 --> 00:02:46,260
la cantidad de veces que la palabra perro aparece en una cadena.

41
00:02:46,260 --> 00:02:48,220
Y nuevamente puedes ignorar los casos extremos.

42
00:02:48,390 --> 00:02:52,290
Entonces, por ejemplo, la cuerda que este perro corre más rápido que el otro tipo de perro.

43
00:02:52,410 --> 00:02:58,840
DAGA Pierce dos veces, así que el perro contar regresa para hacer una función llamada Contar perros hacer eso.

44
00:02:58,930 --> 00:03:03,510
No quieren que uses expresiones lambda y la función Filcher para filtrar las palabras de una lista que

45
00:03:03,510 --> 00:03:05,080
no comienza con la letra S.

46
00:03:05,100 --> 00:03:09,770
Entonces, por ejemplo, si obtiene una secuencia de esta lista, debe filtrarse a esta lista.

47
00:03:09,810 --> 00:03:11,080
Sopa y ensalada.

48
00:03:11,670 --> 00:03:13,230
Y aquí hay un problema final.

49
00:03:13,260 --> 00:03:17,700
Ahora puede continuar y leer la descripción, pero básicamente continuará y completará

50
00:03:17,820 --> 00:03:20,970
esta función para resolver este pequeño problema final aquí.

51
00:03:21,030 --> 00:03:27,090
Y esto implica algunas declaraciones de elefant else junto con la creación de una función si tiene alguna pregunta, no dude en

52
00:03:27,090 --> 00:03:30,350
publicar los foros de preguntas y respuestas y con gusto lo ayudaré.

53
00:03:30,390 --> 00:03:31,120
Gracias a todos.

54
00:03:31,170 --> 00:03:35,090
Y el siguiente paso es una guía de las soluciones para este ejercicio
