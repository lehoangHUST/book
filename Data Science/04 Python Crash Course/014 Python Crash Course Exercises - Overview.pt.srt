1
00:00:05,340 --> 00:00:11,400
Olá a todos e seja bem vindo à conferência de visão geral do exercício do curso Python nesta palestra, recebemos

2
00:00:11,400 --> 00:00:15,560
uma breve visão geral do caderno de exercícios e como abordar o exercício.

3
00:00:15,570 --> 00:00:18,250
Deixe-me seguir em frente e mostrar-lhe onde você pode encontrar o caderno de exercícios.

4
00:00:18,530 --> 00:00:25,490
OK, aqui estou no seu repositório sob a pasta do curso python, você verá três cadernos.

5
00:00:25,510 --> 00:00:30,760
O curso intensivo Python que contém as notas que acabamos de passar na série de conferências de quatro partes.

6
00:00:30,930 --> 00:00:35,380
Então você tem exercícios de curso intensivo Python API e B.

7
00:00:35,550 --> 00:00:39,690
Este é o arquivo do caderno que vamos usar nos exercícios e você verá o caderno

8
00:00:39,780 --> 00:00:40,280
da solução.

9
00:00:40,290 --> 00:00:46,580
Aqui você entra e clique no caderno de exercícios, você deve ver um caderno que se parece com isso.

10
00:00:46,590 --> 00:00:50,850
E, novamente, isso é apenas um teste de exercício opcional, sua compreensão sobre os princípios básicos do Python.

11
00:00:50,850 --> 00:00:55,920
Se você achar esse exercício extremamente desafiador, então você provavelmente ainda não está pronto para o resto do

12
00:00:55,940 --> 00:00:58,700
curso e não tem experiência de programação suficiente para continuar.

13
00:00:58,900 --> 00:01:03,300
E eu sugiro que você tome um outro curso mais orientado para iniciantes completos,

14
00:01:03,300 --> 00:01:06,030
como o campo de treinamento completo de python.

15
00:01:06,160 --> 00:01:10,230
No entanto, esses exercícios devem ser bastante simples e direto.

16
00:01:10,230 --> 00:01:14,350
Por exemplo, este primeiro primeiro está perguntando o que é 7 para o poder de.

17
00:01:14,460 --> 00:01:20,790
Então, espero que você possa ver a resposta aqui como saída, você viria para esta célula ou qualquer ID que você

18
00:01:20,790 --> 00:01:23,900
prefira usar e use Python para responder a esta pergunta.

19
00:01:23,910 --> 00:01:29,340
Então você só precisa se lembrar bem, como você faz um poder exponencial em Python.

20
00:01:29,340 --> 00:01:34,110
Continuará a fazer-lhe outras perguntas, como dividir a cadeia em uma lista, por isso, lembre-se de

21
00:01:34,110 --> 00:01:38,430
como dividir uma string com algum método específico em uma lista e assim por diante.

22
00:01:38,430 --> 00:01:39,570
Então, vá em frente.

23
00:01:39,580 --> 00:01:42,030
Existem exemplos de resultados do que você deveria estar recebendo.

24
00:01:42,210 --> 00:01:45,540
Então você tem uma pergunta perguntando qual é a principal diferença entre uma tupla e uma lista.

25
00:01:45,540 --> 00:01:49,050
Desta forma, você pode apenas responder em voz alta, não é a escrita, acho que não

26
00:01:49,050 --> 00:01:50,650
há código para isso, apenas perguntando quais diferenças.

27
00:01:50,850 --> 00:01:55,290
Em seguida, quero que você crie uma função que agarra o domínio do site de e-mail de uma string e um

28
00:01:55,290 --> 00:01:56,850
usuário de formulário no domínio dot com.

29
00:01:56,850 --> 00:02:02,490
Então, se você tem uma função, ligue para algo como domínio, você deve poder passar em

30
00:02:02,550 --> 00:02:06,150
uma string deste formato e apenas pegar este domínio com ponto.

31
00:02:06,180 --> 00:02:08,640
Então entre e crie algum tipo de função.

32
00:02:08,700 --> 00:02:14,540
de e-mail e retorna o domínio obtido do site da Web que esse e-mail é o anfitrião para isso.

33
00:02:14,540 --> 00:02:18,850
Você pode sair e chamá-lo de domínio que leva em uma string um endereço

34
00:02:18,930 --> 00:02:23,910
Então, você seguirá em frente e criará uma função básica que retornará verdadeira se a palavra cão estiver contida

35
00:02:23,910 --> 00:02:25,050
no fluxo de entrada.

36
00:02:25,200 --> 00:02:29,250
E eu não quero que você tenha que se preocupar com casos de ponta, como a pontuação sendo anexada

37
00:02:29,670 --> 00:02:31,620
à palavra cão, mas não é responsável pela capitalização.

38
00:02:31,620 --> 00:02:35,990
Novamente, não estamos lidando com todos os casos de borda que você pode encontrar.

39
00:02:36,000 --> 00:02:42,690
Apenas a idéia básica de procurar uma string para uma palavra, então queremos que você crie uma função que possa como isso conta

40
00:02:42,830 --> 00:02:46,260
o número de vezes que a palavra cão ocorre em uma string.

41
00:02:46,260 --> 00:02:48,220
E novamente, você pode ignorar casos de ponta.

42
00:02:48,390 --> 00:02:52,290
Então, por exemplo, a corda que este cão corre mais rápido do que o outro cara do cachorro.

43
00:02:52,410 --> 00:02:58,840
DAGA Pierce duas vezes para que o cão da conta chegue para ir para fazer uma função chamada Cães do conde fazer isso.

44
00:02:58,930 --> 00:03:03,510
Eles não querem que você use expressões lambda e a função Filcher para filtrar palavras de uma lista que

45
00:03:03,510 --> 00:03:05,080
não começa com a letra S.

46
00:03:05,100 --> 00:03:09,770
Então, por exemplo, se você receber uma seqüência desta lista, ela deve ser filtrada para esta lista.

47
00:03:09,810 --> 00:03:11,080
Sopa e salada.

48
00:03:11,670 --> 00:03:13,230
E aqui está um problema final.

49
00:03:13,260 --> 00:03:17,700
Agora você pode seguir em frente e ler a descrição, mas basicamente você vai seguir em

50
00:03:17,820 --> 00:03:20,970
frente e preencher esta função para resolver este pequeno problema final aqui.

51
00:03:21,030 --> 00:03:27,090
E isso envolve algumas declarações de elefant else juntamente com a criação de uma função se você tiver alguma dúvida, sinta-se à vontade

52
00:03:27,090 --> 00:03:30,350
para publicar os fóruns de Q &amp; A e ficarei feliz em ajudá-lo.

53
00:03:30,390 --> 00:03:31,120
Obrigado a todos.

54
00:03:31,170 --> 00:03:35,090
E a seguir é um passo a passo das soluções para este exercício
