1
00:00:06,780 --> 00:00:11,700
みなさんこんにちはPIオペレーションの講義を歓迎します。この講義では、審判のアレイの基本操作改革についてお話します。

2
00:00:11,700 --> 00:00:14,520
&nbsp;

3
00:00:14,640 --> 00:00:18,720
木星ノートブックにジャンプして始めましょう。

4
00:00:18,720 --> 00:00:21,090
さて、ここで私たちは木星のノートブックにいます。

5
00:00:21,210 --> 00:00:27,180
&nbsp;

6
00:00:27,180 --> 00:00:33,360
&nbsp;

7
00:00:33,470 --> 00:00:36,400
ここでは、スカラー演算を使って配列演算配列を使って配列を議論し、次にそれらが何であるか、どのようにしてそれらを見つけることができるのかを、重要なpiをNPEと呼ぶことから始めます。

8
00:00:36,810 --> 00:00:44,370
そして、私は先に進んで、私たちはNと言う配列を作るつもりです。 P。

9
00:00:44,370 --> 00:00:47,600
手配してください。ちょうど0のカンマから移動します。

10
00:00:47,640 --> 00:00:53,090
そうすることで、0から10の数字が得られ、0から10の11桁になります。

11
00:00:53,460 --> 00:00:53,910
大丈夫。

12
00:00:53,910 --> 00:00:59,460
Python自体から既に慣れ親しんでいる単純な算術記号を使うだけで、配列操作で簡単に配列を実行できます。

13
00:00:59,460 --> 00:01:01,600
&nbsp;

14
00:01:02,070 --> 00:01:08,400
たとえば、要素ごとに2つの配列を一緒に追加する場合は、単に配列と配列を指定します。

15
00:01:08,400 --> 00:01:10,300
&nbsp;

16
00:01:10,320 --> 00:01:12,140
ここで2つの配列を一緒に追加します。

17
00:01:12,180 --> 00:01:14,450
この場合、私は自分自身に配列を追加しています。

18
00:01:14,590 --> 00:01:18,370
したがって本質的にすべての数字は2倍になりました。

19
00:01:18,840 --> 00:01:25,500
私は減算や乗算のために同じことをすることができます。

20
00:01:25,500 --> 00:01:31,770
&nbsp;

21
00:01:31,770 --> 00:01:37,800
&nbsp;

22
00:01:37,800 --> 00:01:43,960
私はスカラー演算を配列と同じように実行することができるので、スケーラーはただ一つの数を意味しているので、配列内のすべての要素にその番号をブロードキャストします。私はしたい場合は。

23
00:01:44,010 --> 00:01:45,140
ここに私の配列です。

24
00:01:45,240 --> 00:01:48,270
配列のすべての要素に100を追加します。

25
00:01:48,270 --> 00:01:50,590
私はプラスとスカラーそのものを言うことができました。

26
00:01:50,820 --> 00:01:53,620
そしてそれは配列のすべての要素を100個追加します。

27
00:01:53,620 --> 00:01:55,680
これは乗算除算のためにも機能します。

28
00:01:58,230 --> 00:01:59,910
&nbsp;

29
00:01:59,910 --> 00:02:04,820
だから、ブレーク中のすべての原子から100を引いて、マイナス100とすることを望むならば。

30
00:02:05,130 --> 00:02:05,760
大丈夫。

31
00:02:05,760 --> 00:02:11,940
したがって、これらは、配列演算の配列またはスカラ演算を伴う配列のいずれかで実行できる基本的な算術演算です。

32
00:02:11,940 --> 00:02:13,800
&nbsp;

33
00:02:13,950 --> 00:02:20,510
私があなたに見せたいことは、何度もNUMPの高値が、特定の数学的演算でエラーを出力するのではなく、単に警告を出すということです。

34
00:02:20,580 --> 00:02:22,940
&nbsp;

35
00:02:23,220 --> 00:02:31,250
たとえば、Pythonで1を0で割ってみると、実際のエラーにはゼロ除算エラーがあります。これは、数値をゼロで割り切れないので意味があります。

36
00:02:31,250 --> 00:02:35,290
&nbsp;

37
00:02:35,340 --> 00:02:38,400
PIはあなたに同じエラーを与えません。

38
00:02:38,490 --> 00:02:43,860
だから、もし私がArrayで割ったレートを言うなら。

39
00:02:43,890 --> 00:02:46,200
最初の要素がゼロであることに注目してください。

40
00:02:46,230 --> 00:02:50,240
ゼロをゼロで割って、実際に意味をなさないと言ってみよう。

41
00:02:50,250 --> 00:02:53,570
ただし、piは警告を出しません。

42
00:02:53,570 --> 00:02:58,580
それはここのような真実に遭遇した無効な価値を言うでしょう、そしてそれはただあなたにヌルを与えるでしょう。

43
00:02:58,620 --> 00:03:05,100
ゼロで0を除算しようとすると、1が1で除算され、1 2が2で除算され、2で除算されたことも1であると、それ以外のものはすべてOKです。

44
00:03:05,100 --> 00:03:06,360
&nbsp;

45
00:03:06,390 --> 00:03:07,710
等。 等 しかし、最初のものは0で除算され、実行され、名前またはオブジェクトが返されませんでした。

46
00:03:07,710 --> 00:03:14,170
それは実際にあなたにエラーを提供していませんでしたが、あなたはそこでの区別に注意することが重要な出力を得ていることを意味します。

47
00:03:14,250 --> 00:03:19,170
&nbsp;

48
00:03:19,380 --> 00:03:20,840
つまり、コードに何らかの操作があっても、実際にはエラーは発生しません。

49
00:03:20,850 --> 00:03:25,310
&nbsp;

50
00:03:25,350 --> 00:03:30,900
コードは引き続き実行され、代わりに、別の数字を0で割った操作をtrynaで実行すると警告が表示されます。

51
00:03:30,900 --> 00:03:32,980
したがって、0の代わりに0で割った1の例は、ゼロによってVajdaです。

52
00:03:32,990 --> 00:03:36,720
警告も表示されます。

53
00:03:36,720 --> 00:03:38,190
しかし、この場合、nullの代わりにAlexaの無限大が表示されます。

54
00:03:38,400 --> 00:03:41,880
だからもう一度、ゼロで分裂し、ここでビデオ警告を真実に反論してください。

55
00:03:42,150 --> 00:03:45,930
しかし、それはまだコードを実行し、ゼロで割ったものに対して無限大を表すのに十分です。

56
00:03:46,050 --> 00:03:52,170
その最初の要素。

57
00:03:52,440 --> 00:03:55,340
大丈夫。

58
00:03:55,350 --> 00:03:55,800
&nbsp;

59
00:03:55,800 --> 00:04:00,270
これは、除算を使って作業しているときに念頭に置いておくべきことです。数字を含む配列は数字0であり、指数で配列を行うこともできるので注意が必要です。

60
00:04:00,270 --> 00:04:06,760
私はちょうどあなたがPythonを持っていて、スカラーか配列のどちらかを持っているように、Asterix Asterixと言っています。

61
00:04:06,780 --> 00:04:12,510
これは2の威力を発揮する配列です。

62
00:04:12,660 --> 00:04:15,210
&nbsp;

63
00:04:15,270 --> 00:04:21,870
だから、すべてが配列で二乗されています。Nelはユニバーサル配列関数について議論しています。numpadには、本質的に数学的演算である多くのユニバーサル配列関数が付属しています。

64
00:04:21,870 --> 00:04:26,220
操作を実行して配列全体にブロードキャストすることができます。

65
00:04:26,220 --> 00:04:30,830
何か共通のものを見てみましょう。

66
00:04:30,840 --> 00:04:33,390
&nbsp;

67
00:04:33,450 --> 00:04:39,060
たとえば、配列内のすべての要素の平方根を取る場合は、Pと言うだけで配列を渡すことができます。

68
00:04:39,100 --> 00:04:42,690
そして、これは配列のすべての平方根をとります。

69
00:04:42,930 --> 00:04:46,550
&nbsp;

70
00:04:46,560 --> 00:04:55,830
同様に指数関数を計算するためにはXPと言うこともできますし、配列や最大値ではMaxと言うこともできるし、Maxと言って配列を渡すこともできます。

71
00:04:55,830 --> 00:05:01,010
それは、私たちが最初にpyrosに関する講義で以前に見た方法を、それを呼び出すことと同じことです。

72
00:05:01,230 --> 00:05:06,120
&nbsp;

73
00:05:06,120 --> 00:05:07,750
&nbsp;

74
00:05:07,770 --> 00:05:15,560
このような時にNeutrikのメトリック関数を使用することもできます。これは基本的にすべての要素を正弦波に渡し、共同符号となり、対数オプションもあります。

75
00:05:15,570 --> 00:05:19,710
&nbsp;

76
00:05:19,710 --> 00:05:25,380
あなたはそのログを言うことができ、何かがうまくいかない場合は、ゼロのログは技術的に負の無限大です。実際にはランタイム警告が表示されます。

77
00:05:25,380 --> 00:05:28,520
ゼロで割った値。

78
00:05:28,530 --> 00:05:29,590
しかし、それはあなたに負の無限大を与える答えです。

79
00:05:29,730 --> 00:05:32,610
&nbsp;

80
00:05:32,610 --> 00:05:36,870
あなたがこれらのユニバーサルアレイ機能やリファレンスのリストをどこで見つけることができるのか疑問に思っているなら、ノートブックをチェックアウトして、ユニバーサルアレイ機能のためのリンクがあります。

81
00:05:36,870 --> 00:05:41,550
それはあなたのように見えるリンクになります。

82
00:05:41,840 --> 00:05:44,540
これはユニバーサルファンクションのためのEmpire raid documentationまたはここに書かれています。

83
00:05:44,550 --> 00:05:50,340
そして、あなたがこのページの一番下にスクロールすると、このリンクはこの講義のノートブックにあります。

84
00:05:50,610 --> 00:05:55,260
PIオペレーション。

85
00:05:55,620 --> 00:05:57,090
利用可能なすべての汎用関数の一覧が表示されます。

86
00:05:57,090 --> 00:06:00,690
したがって、基本的な数学演算では、絶対余りの減算などを行います。 三角関数の批判といくつかのより高度な機能。

87
00:06:00,900 --> 00:06:07,560
&nbsp;

88
00:06:08,040 --> 00:06:10,320
それはちょうど比較関数最大最小浮動関数などです それが非常に基本的なまたは一般的な数学関数の場合は、おそらく、このページを最初に訪問し、特定の数学的操作を処理する独自の関数を作成する前にいくつかのパイが既に組み込まれているかどうかを確認する必要があります。

89
00:06:10,330 --> 00:06:14,860
&nbsp;

90
00:06:15,270 --> 00:06:20,730
&nbsp;

91
00:06:20,730 --> 00:06:26,280
あなたはあなたの配列で演奏しようとしていました。

92
00:06:26,280 --> 00:06:27,320
&nbsp;

93
00:06:27,330 --> 00:06:29,070
コース全体を通して非常に基本的なもので、コースの残りの部分でそれらを遭遇したときに思い出させてくれるでしょう。

94
00:06:29,370 --> 00:06:34,350
これは配列に関する基本的な操作のすべてです。

95
00:06:34,410 --> 00:06:35,830
基本演算は、虹彩ベースの配列でも、配列とスカラー単位でもどちらでも構いません。

96
00:06:36,090 --> 00:06:39,840
注意すべき唯一のことは、0があり、分割配列を使用している場合です。

97
00:06:40,080 --> 00:06:46,650
次に、この講義の第2部では、普遍的な配列関数を取り上げました。

98
00:06:46,980 --> 00:06:51,230
最も一般的な数学演算は、すでにOKで構築されていることに注意してください。

99
00:06:51,390 --> 00:06:55,990
みんなありがとう、私は次の講演でお会いしましょう

100
00:06:56,040 --> 00:07:01,780
&nbsp;

101
00:07:01,980 --> 00:07:04,020
&nbsp;
