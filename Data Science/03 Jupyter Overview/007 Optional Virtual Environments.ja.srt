1
00:00:05,730 --> 00:00:10,950
みなさんこんにちは、アナコンダの仮想環境に関するこのオプションのレクチャーにようこそ。

2
00:00:10,950 --> 00:00:16,710
これは、Anacondaディストリビューションを使用して仮想環境を作成する方法に関する、より高度なトピックです。

3
00:00:17,070 --> 00:00:20,580
興味がない場合は、このトピックをスキップしても構いません。

4
00:00:20,880 --> 00:00:23,520
さあ、続けましょう。

5
00:00:23,550 --> 00:00:29,310
バーチャル環境では、あなたのコンピュータに、Pythonやライブラリの仮想インストールを設定できる仮想環境について話しましょう。

6
00:00:29,310 --> 00:00:32,130
&nbsp;

7
00:00:32,340 --> 00:00:37,860
そうすれば、Pythonやライブラリの複数のバージョンを持ち、これらの環境を簡単に有効または無効にすることができます。

8
00:00:37,860 --> 00:00:39,210
&nbsp;

9
00:00:39,210 --> 00:00:44,220
先ほど例を挙げて説明したい理由の例を見てみましょう。

10
00:00:44,220 --> 00:00:47,870
おそらく、異なるバージョンのライブラリでプログラムを作成することがあります。

11
00:00:48,060 --> 00:00:54,750
たとえば、Sacketがバージョン0を学習する完全なプログラムを開発したことがあります。 27そしてある時点では次のバージョンは0です。

12
00:00:54,750 --> 00:00:58,560
1 8が解放される。

13
00:00:58,560 --> 00:01:04,350
たぶん、0の新機能を探究したいかもしれません。 20をアップグレードしても、古いコードを壊すことは望ましくありません。

14
00:01:04,350 --> 00:01:05,340
&nbsp;

15
00:01:05,340 --> 00:01:09,510
ここでは、特定のバージョンのライブラリ用の仮想環境を作成することができます。

16
00:01:11,130 --> 00:01:15,390
他の例では、ライブラリのインストールが正しい場所にあることを確認したい場合があります。

17
00:01:15,900 --> 00:01:20,940
たとえば、あなたのコンピュータ上に複数のバージョンのPythonが必要な場合がありますので、Python

18
00:01:20,940 --> 00:01:28,500
2を確認したいと思うでしょう。 ライブラリの7バージョンはPython 3と比べて正しい場所にあります。 5バージョンでは、Python

19
00:01:28,500 --> 00:01:35,800
2で1つの環境を持つように仮想環境を実行できます。 7とPython 3の別のものです。 5。

20
00:01:36,090 --> 00:01:42,120
Anacondaには多くの機能が搭載されている通常のPythonディストリビューション用の仮想EライブラリとVライブラリがあります。

21
00:01:42,120 --> 00:01:44,740
&nbsp;

22
00:01:44,910 --> 00:01:50,030
この仮想ENVライブラリを使用すると、仮想環境を作成することができ、仮想環境マネージャです。

23
00:01:50,520 --> 00:01:55,740
&nbsp;

24
00:01:55,740 --> 00:02:00,930
しかし、このコースで使用しているPythonの推奨ディストリビューションであるAnacondaは、既に仮想環境を作成し、それらを非常に簡単に無効にする仮想環境マネージャーを内蔵しています。

25
00:02:01,200 --> 00:02:04,480
&nbsp;

26
00:02:04,480 --> 00:02:08,610
先に進む予定の公式ドキュメントのリソース・リンクを調べてください。

27
00:02:08,610 --> 00:02:09,350
&nbsp;

28
00:02:09,480 --> 00:02:13,160
だから先に進み、リソースリンクをチェックしてください。このリソースリンクはあなたにあなたを連れて行きます。

29
00:02:13,290 --> 00:02:18,960
または、手動で入力したい場合は、公式のPIデータドキュメントにアクセスするか、環境を使用することについてお話します。

30
00:02:18,960 --> 00:02:20,940
&nbsp;

31
00:02:20,940 --> 00:02:24,890
このファイルパス全体またはファイルパスをブラウザに入力しない場合は、リソースリンクをクリックするだけです。

32
00:02:24,900 --> 00:02:26,540
&nbsp;

33
00:02:26,570 --> 00:02:31,230
先に進むとブラウザにジャンプし、ドキュメントを少し調べて、コマンドプロンプトでどのように使用できるかを示します。

34
00:02:31,230 --> 00:02:33,300
&nbsp;

35
00:02:33,300 --> 00:02:35,340
さあ、今すぐにジャンプしましょう。

36
00:02:36,060 --> 00:02:39,360
ここで私は管理環境のためのリソースリンクにいます。

37
00:02:39,390 --> 00:02:44,670
&nbsp;

38
00:02:44,670 --> 00:02:50,040
&nbsp;

39
00:02:50,070 --> 00:02:50,940
私がやりたいことは、環境を作り出すことです。環境を作るための基本的な手順を見てください。新しい環境を作るためにコマンドを入力する必要があります。

40
00:02:50,970 --> 00:02:57,120
あなたは先に進んで、Konda createコマンドの後にダッシュダッシュネームをつけてから、あなたの新しい環境を呼びたい名前を使用します。

41
00:02:57,120 --> 00:02:58,930
&nbsp;

42
00:02:58,950 --> 00:03:04,710
この例では、新しい環境snowflakeを呼び出してから、その新しい環境を開始する基本パッケージまたはライブラリの領域を呼び出します。

43
00:03:04,710 --> 00:03:08,430
&nbsp;

44
00:03:08,430 --> 00:03:11,690
ここにパッケージを入れないと、エラーが発生する可能性があります。

45
00:03:11,730 --> 00:03:16,680
ですから、コマンドプロンプトやターミナルでこの完全なコマンドを取得したら、PythonのAnacondaディストリビューションをインストールした後に、Kanoの指示に従います。

46
00:03:16,680 --> 00:03:20,420
&nbsp;

47
00:03:20,430 --> 00:03:24,810
yesと入力すると、新しい環境が作成されます。

48
00:03:24,810 --> 00:03:30,200
この場合、SnowflakeにはこのプログラムやBYO Pythonパッケージが含まれています。

49
00:03:30,360 --> 00:03:36,150
特定のバージョンのPythonを指定しない場合は、ベースバージョンのPythonを使用します。

50
00:03:36,150 --> 00:03:38,690
あなたがダウンロードするのはアナコンダです。

51
00:03:38,820 --> 00:03:41,970
しかし、実際にPythonの特定のバージョンを指定することはできます。

52
00:03:42,110 --> 00:03:44,100
それを行う方法も表示されます。

53
00:03:44,100 --> 00:03:46,470
私のコマンドプロンプトにジャンプしましょう。

54
00:03:46,650 --> 00:03:49,820
ここに置くので、私はこれらの手順を歩くことができます。

55
00:03:50,190 --> 00:03:52,500
OKですので、私のコマンドプロンプトです。

56
00:03:52,590 --> 00:03:58,410
私は先に進んで、私たちはそれを私たちが知っているので、私たちが知っているので、私たちはそれを私たちは知っているので、実際にふわふわして何かをしていると、それを開始するために図書館に入れる必要があります。

57
00:03:59,030 --> 00:04:05,700
&nbsp;

58
00:04:05,700 --> 00:04:11,280
&nbsp;

59
00:04:11,280 --> 00:04:11,890
&nbsp;

60
00:04:12,030 --> 00:04:14,240
NUMPに始まりましょう。

61
00:04:14,280 --> 00:04:19,770
それはパッケージのメタデータを取得することを私が知る最初のライブラリの1つになるからです。

62
00:04:19,770 --> 00:04:20,530
&nbsp;

63
00:04:20,570 --> 00:04:24,170
彼らは、あなたが進めたい場合、アラスカに何をインストールする必要があるのか​​のリストを得るでしょう。

64
00:04:24,420 --> 00:04:31,110
ここでは、まず、特定のパッケージをリンクして抽出する必要があるものを抽出する理由を説明します。

65
00:04:31,110 --> 00:04:32,150
&nbsp;

66
00:04:32,260 --> 00:04:33,990
これで完了です。

67
00:04:34,010 --> 00:04:38,970
この環境を有効にするために、私はこの環境を無効にするためにふわふわして使用することができます。

68
00:04:38,970 --> 00:04:40,790
私は非活性化を使用する。

69
00:04:40,830 --> 00:04:46,920
私の中に入って、私のベースバージョンのPythonがこの仮想環境バージョンのPythonと似ているかどうかを見てみましょう。

70
00:04:46,980 --> 00:04:48,330
&nbsp;

71
00:04:48,330 --> 00:04:51,690
この仮想環境はpiで開始されただけであることを思い出してください。

72
00:04:51,840 --> 00:04:58,290
だから、私が今Pythonを入力するだけで、私はAnacondaの私の正規分布を取得します。この場合、私は2でインストールしました。

73
00:04:58,560 --> 00:05:00,920
7。

74
00:05:00,930 --> 00:05:07,450
例えば、先に進んでnum p iとP pを入力したとします。

75
00:05:07,470 --> 00:05:12,770
PDが入力するようにインポートパンダラーと言うとうまくいきます。

76
00:05:12,840 --> 00:05:14,470
それもうまく動作します。

77
00:05:14,550 --> 00:05:20,970
&nbsp;

78
00:05:20,970 --> 00:05:27,450
&nbsp;

79
00:05:27,450 --> 00:05:30,060
今ここからやりましょう。私は今、ふわふわと呼ばれていた私の仮想環境を活性化するつもりです。そして今、私は実際にこのふわふわした環境の中にいることを私に知らせるふわふわしたカッコ内に気付くでしょう。

80
00:05:30,060 --> 00:05:37,740
だから私がPythonと言ってEnterを押すと、同じバージョンのPython 2が得られます。 私のベースディストリビューションは、重要な審判員とPのためにいくつかのものをインポートしようとすると面白いことが起きるだろうと私は思っています。

81
00:05:38,040 --> 00:05:42,690
&nbsp;

82
00:05:42,690 --> 00:05:46,280
&nbsp;

83
00:05:46,290 --> 00:05:53,860
私の仮想環境を有効にして、import pandasと言うとPDとしてインポートエラーが発生します。

84
00:05:53,880 --> 00:05:55,980
panderersという名前のモジュールはありません。

85
00:05:56,010 --> 00:06:00,960
その理由は、この仮想環境にPandursが含まれていないためです。

86
00:06:00,960 --> 00:06:06,390
この仮想環境にもパンダが含まれていることを実際に確認したい場合は、私が既に行ったようにそれを有効にしてから、Kondaにここにインストールするか、Jupiter

87
00:06:06,390 --> 00:06:14,720
sikatがライブのライブなどについて学ぶライブラリをインストールしてください。

88
00:06:14,730 --> 00:06:17,140
&nbsp;

89
00:06:17,430 --> 00:06:24,630
だから私は先を進めて、フワフワを無効にして元のPythonディストリビューションに戻したい場合にはこれを削除します。

90
00:06:24,630 --> 00:06:26,600
私は単に無効化がエンターを押して、その仮想環境を無効にすると言う。

91
00:06:26,730 --> 00:06:32,910
仮想環境のもう1つの有効な使用例は、異なるバージョンのPythonを使用する環境を作成することです。

92
00:06:32,910 --> 00:06:38,430
&nbsp;

93
00:06:38,430 --> 00:06:40,070
Kondaが作成してダッシュダッシュを入れて追加してくれると言うだけで簡単にできます。

94
00:06:40,200 --> 00:06:47,120
ダッシュとダッシュンを1つだけ言うこともできますが、あなたが望むバーチャル環境の名前をダッシュ​​ダッシュで表示します。

95
00:06:47,400 --> 00:06:54,150
&nbsp;

96
00:06:54,150 --> 00:06:55,570
私たちはこの仮想環境と呼ぶつもりです。

97
00:06:55,590 --> 00:06:58,080
私のpython 3のバージョン空間。

98
00:06:58,140 --> 00:07:03,710
そして、あなたはPythonが3に等しいと言うでしょう。 5。

99
00:07:03,900 --> 00:07:08,150
ここでは、piのような単一のライブラリを入れるだけのオプションがあります。

100
00:07:08,430 --> 00:07:14,220
アナコンダの流通全体が必要な場合は、ここでアナコンダを入力できます。

101
00:07:14,430 --> 00:07:20,180
それはAnacondaの全流通を覚えているので、かなり長い時間がかかります。

102
00:07:20,250 --> 00:07:25,570
だから、私は入って、ちょうどパイと言うでしょう。

103
00:07:25,710 --> 00:07:27,730
ですから、これが進んで、私のPython

104
00:07:27,780 --> 00:07:33,180
3バージョン空間Pythonと呼ばれるこの新しい仮想環境をKondaが作成すると言うと、Pythonは3に等しくなります。 5μl。

105
00:07:33,180 --> 00:07:37,590
Enterパッケージのメタデータをもう一度取得します。

106
00:07:37,760 --> 00:07:40,500
Python 3ではこれをすべて実行することを忘れないでください。

107
00:07:40,650 --> 00:07:43,040
私は先に進んで、なぜパッケージングを先取りして解決するのかと言うでしょう。

108
00:07:43,140 --> 00:07:48,000
私は今、抽出とインストールの終了にジャンプするつもりです、そして、今それは完全です。

109
00:07:48,000 --> 00:07:55,410
Pythonでの入力だけを見てみましょう。

110
00:07:55,650 --> 00:07:59,790
私はPython 2を持っています。 7ここに私のベースディストリビューションです。

111
00:08:00,090 --> 00:08:04,360
私は先に進み、それをやめるつもりです。

112
00:08:04,410 --> 00:08:06,290
さあ、私の環境をチェックしてみましょう。

113
00:08:06,390 --> 00:08:08,500
&nbsp;

114
00:08:08,520 --> 00:08:16,170
私は近藤空間情報ダッシュダッシュとvsと言うことができます。このコマンドは私の環境をここにリストアップします。私は先に作った他の環境例ではふわふわしています。

115
00:08:16,170 --> 00:08:19,680
私のPython 3バージョンpy 3：5は、私が持っている別の環境であり、その後はPythonの根源バージョンです。

116
00:08:19,680 --> 00:08:25,800
スタートがあることがわかります。

117
00:08:26,010 --> 00:08:27,020
それを示してください。

118
00:08:27,030 --> 00:08:28,080
&nbsp;

119
00:08:28,080 --> 00:08:32,570
だからあなたが木星のノートブックを開いていて、Python Roopのようなものがあれば、そのルーツを意味します。

120
00:08:32,580 --> 00:08:33,270
Pythonのインストール。

121
00:08:33,300 --> 00:08:35,300
私のPython 3バージョン環境を有効にしましょう。

122
00:08:35,340 --> 00:08:42,600
入る。

123
00:08:42,840 --> 00:08:43,710
あなたは私のPython 3バージョンに気付くでしょう。

124
00:08:43,710 --> 00:08:45,910
今、私はこの仮想環境の中でPythonを呼び出します。

125
00:08:45,930 --> 00:08:49,260
私はPython 3を手に入れることに注意してください。 5。

126
00:08:49,290 --> 00:08:51,580
&nbsp;

127
00:08:51,610 --> 00:08:57,840
したがって、実際にPythonの異なるバージョンが必要だと指定できるのであれば、その仮想環境を作成するときに、Pythonが等しいかどうか、そして任意のバージョン番号を指定してください。

128
00:08:57,930 --> 00:09:01,080
だから1を2で割ったようなことをすれば、私は0を得ます。 5これはPython 2では当てはまりません。

129
00:09:01,080 --> 00:09:07,240
それで本当にあなたが知る必要があるすべてです。

130
00:09:07,680 --> 00:09:09,900
&nbsp;

131
00:09:09,930 --> 00:09:15,930
仮想環境を作成する限り、リソースリンクには基本的に、環境を変更する環境の変更、環境の削除などのように知りたいことがすべてあります。 それはかなり簡単です。

132
00:09:15,930 --> 00:09:20,440
今度は、この講義ですべてのことを理解したので、必要に応じてドキュメントを参照することができます。

133
00:09:20,640 --> 00:09:21,930
&nbsp;

134
00:09:21,930 --> 00:09:26,070
ここでもあなた自身の仮想環境を作成したい場合に備えて、オプションの講義です。

135
00:09:26,070 --> 00:09:27,820
&nbsp;

136
00:09:27,840 --> 00:09:31,870
私はあなたのすべてのライブラリがあなたが望むバージョンであることを確認するために仮想環境を作成することをお勧めします。

137
00:09:31,920 --> 00:09:36,990
ですから、このコースを続行したいのであれば、私のデータサイエンスなどの仮想環境を作成してください。

138
00:09:36,990 --> 00:09:38,510
&nbsp;

139
00:09:38,520 --> 00:09:44,190
大丈夫。

140
00:09:44,220 --> 00:09:46,520
この講義を楽しんでいたら、次の会場で会いましょう。

141
00:09:46,530 --> 00:09:47,160
みんなありがとう。

142
00:09:47,190 --> 00:09:49,860
&nbsp;

143
00:09:49,860 --> 00:09:51,230
&nbsp;
