1
00:00:05,460 --> 00:00:09,580
Hello everyone and welcome to the mat Partlet part to lecture series.

2
00:00:09,690 --> 00:00:14,280
We're going to pick up right where we left off in part one where we learn about functional programming

3
00:00:14,280 --> 00:00:15,270
with that plot.

4
00:00:15,420 --> 00:00:18,990
And more importantly the object oriented methods with Matt plotless.

5
00:00:19,110 --> 00:00:22,040
Let's go ahead and jump back to the Jupiter notebook to get started.

6
00:00:22,250 --> 00:00:22,540
OK.

7
00:00:22,560 --> 00:00:28,200
Here I am back at the Jupiter notebook number from last time we learned how to use that figure and then

8
00:00:28,200 --> 00:00:35,600
figure out axis and then axes that plot in order to plot onto an object oriented figure using that plotless

9
00:00:35,610 --> 00:00:36,180
.

10
00:00:36,390 --> 00:00:41,940
The next thing we're going to do is learn how to create subplots using the same object oriented programming

11
00:00:41,940 --> 00:00:42,950
method.

12
00:00:42,990 --> 00:00:51,600
I'm going to go ahead and say Here let's just clear everything in this cell and we're going to go ahead

13
00:00:51,630 --> 00:01:02,790
and say this and move the cell to the center and we'll say fig comma axes is equal to peel T and instead

14
00:01:02,790 --> 00:01:08,900
of calling figure now says we're going to try to do subplots we're going to say subplots so appeal to

15
00:01:08,910 --> 00:01:10,340
the subplots.

16
00:01:10,500 --> 00:01:12,270
Let's go ahead and run this.

17
00:01:12,570 --> 00:01:15,600
And notice here we get subplots just out.

18
00:01:15,600 --> 00:01:20,790
Now what I can do is just use the axes object like I've done before to plot on it.

19
00:01:21,090 --> 00:01:25,400
And this is essentially no different than what we were doing before.

20
00:01:25,710 --> 00:01:32,040
And here he said X is that plot x come a Y where subplots differs is where you can specify the number

21
00:01:32,040 --> 00:01:33,610
of rows and columns.

22
00:01:33,810 --> 00:01:42,420
For instance I can say and rows as my first argument is equal to 1 and calls as my second argument is

23
00:01:42,420 --> 00:01:44,330
equal to two.

24
00:01:44,700 --> 00:01:49,970
And I'm going to go ahead and just show you what that looks like a hash tag that out and run this.

25
00:01:50,070 --> 00:01:57,660
Now you can see I have one row with two columns and that's basically just a nice front handle on calling

26
00:01:57,660 --> 00:02:05,640
Piel T-Dog figure also plot's is doing is essentially calling these fig axes automatically for you based

27
00:02:05,670 --> 00:02:08,900
off of these arguments and rows and columns.

28
00:02:09,180 --> 00:02:12,540
Let's go ahead and play around with this let's go show one more example.

29
00:02:12,570 --> 00:02:20,440
Three rows by let's go in and say three columns and we see now we have three rows by three columns.

30
00:02:20,550 --> 00:02:25,770
Later on we'll see how to deal with the issue of stuff overlapping but it's essentially just a one line

31
00:02:25,770 --> 00:02:26,600
call.

32
00:02:26,610 --> 00:02:34,720
We just say peel t Titely out and that actually ends up fixing those overlaps.

33
00:02:34,810 --> 00:02:41,270
Let's go out and take a step back and just work with this one by two.

34
00:02:41,280 --> 00:02:41,670
All right.

35
00:02:41,760 --> 00:02:43,320
We have realty that subplots.

36
00:02:43,320 --> 00:02:47,520
And essentially it's just an axes manager on top of Piel to that figure.

37
00:02:47,550 --> 00:02:52,970
Something to note here is that instead of just saying fig equals PBT the figure I am doing some tuple

38
00:02:52,990 --> 00:02:59,100
and packing them saying fig comma axes is equal to peel teeth that subplots and the thing to know about

39
00:02:59,100 --> 00:03:07,290
this axes object is if I go down here to this cell and type in axes axes is actually just an array of

40
00:03:07,290 --> 00:03:13,710
map plot lib axes essentially it's just a list of these axes object meaning I can actually iterate through

41
00:03:13,710 --> 00:03:14,290
it.

42
00:03:14,460 --> 00:03:29,950
I can say something like this for current underscore letters X in axes axes dot plot x come a y.

43
00:03:30,020 --> 00:03:31,610
I don't actually want to say X is not plot.

44
00:03:31,620 --> 00:03:40,450
I want to say current X stop plot and then we see that we've actually plotted through this axes.

45
00:03:40,710 --> 00:03:47,550
Again this is just to show that this axes object is essentially just a list of map lib axes which are

46
00:03:47,550 --> 00:03:50,190
the ones that you manually created when you said Fig.

47
00:03:50,250 --> 00:03:56,390
Add underscore axes just further driving the point home that the only difference between Pilani that

48
00:03:56,460 --> 00:04:03,090
subplots and just doing pilt that figure is that Piel t that subplots is essentially doing this at underscore

49
00:04:03,090 --> 00:04:08,470
axes stuff for you automatically based off of how many rows and columns you want.

50
00:04:08,490 --> 00:04:09,170
OK.

51
00:04:09,450 --> 00:04:13,600
Since we can iterate through this axes object we can actually also index it.

52
00:04:13,620 --> 00:04:24,140
Meaning I can say axes 0 Dopp plots X come a Y and here I've plotted on this first axes.

53
00:04:24,140 --> 00:04:25,090
Now I can do the same thing.

54
00:04:25,090 --> 00:04:31,460
The second one I can say axes 1 dot plots y comma x.

55
00:04:31,770 --> 00:04:40,300
And here we seen how to either index call offer the axes array or iterate through this axes array and

56
00:04:40,300 --> 00:04:45,490
just like we saw earlier we can also call titles and labels off of this so I can say something like

57
00:04:45,520 --> 00:05:03,180
xes 0 set title will say first plot and then I will say axes 1 underscore title second plot and hero

58
00:05:03,190 --> 00:05:09,580
are able to call titles and you can say the x labels set y label off of either of these axes objects

59
00:05:09,580 --> 00:05:09,640
.

60
00:05:09,640 --> 00:05:16,060
All you're doing is just actually grabbing that axes subplot object based off of its position in the

61
00:05:16,060 --> 00:05:17,310
array.

62
00:05:17,320 --> 00:05:17,770
All right.

63
00:05:17,980 --> 00:05:22,040
Let's do a quick review of these two object oriented methods.

64
00:05:22,300 --> 00:05:24,330
This first method is a little more manual.

65
00:05:24,370 --> 00:05:26,380
It's Piel T-Dog figure.

66
00:05:26,410 --> 00:05:32,650
You go ahead and create that figure you manually add the axes and choose its location and size and then

67
00:05:32,770 --> 00:05:39,880
based off the axes you go ahead and say that plot and that title X label set y label etc. which we show

68
00:05:39,880 --> 00:05:42,840
examples up here.

69
00:05:42,970 --> 00:05:48,280
The second method is for subplots that you want arranged by Rosing columns.

70
00:05:48,280 --> 00:05:55,450
This allows you to call fig comma axes so tuple in packing here is equal to the subplots call and then

71
00:05:55,480 --> 00:06:01,600
based off of those axes you get an array of axes and you can plot and set titles either by indexing

72
00:06:01,660 --> 00:06:05,300
or by iterating through that axes object.

73
00:06:05,300 --> 00:06:12,760
And if you ever have any issues with things overlapping You can always just say peel T-top tightly close

74
00:06:12,770 --> 00:06:16,470
parentheses and this will take care of any overlapping plots.

75
00:06:16,480 --> 00:06:20,210
I recommend that you just always put this at the end of your plot statements.

76
00:06:20,830 --> 00:06:27,970
OK now start talking about figure size aspect ratio and GPI map Cutlip allows you to control each of

77
00:06:27,970 --> 00:06:32,620
these aspects and you can specify them when you're calling the figure object.

78
00:06:32,620 --> 00:06:34,990
Let me go ahead and show you an example.

79
00:06:34,990 --> 00:06:44,500
I'm going to say think equals Piel figure and the arguments I can passen are Figgs size is equal to

80
00:06:44,500 --> 00:06:44,800
.

81
00:06:44,890 --> 00:06:50,350
And then you pass a tuple where the tuple is the width and height of the figure in inches.

82
00:06:50,380 --> 00:06:58,630
For instance I can go ahead and say three by two and then a second argument you can add is GPI for instance

83
00:06:58,690 --> 00:07:03,940
100 GPI where the API just the dots per inch or pixels per inch.

84
00:07:04,120 --> 00:07:07,490
I usually just use the default GPI when I'm working with the Jupiter note book.

85
00:07:07,600 --> 00:07:14,290
So I'm going to go ahead and just clear that for now I'm going to add a set of axes to this call it

86
00:07:14,290 --> 00:07:27,310
just X and we'll say fig dot add underscore axes and we'll say 0 0 1 comma 1 and then I'm going to go

87
00:07:27,310 --> 00:07:33,220
ahead and say X stop plot x come a Y.

88
00:07:33,340 --> 00:07:33,700
All right.

89
00:07:33,700 --> 00:07:34,710
So there's our plot.

90
00:07:34,720 --> 00:07:36,970
Let's go ahead and mess around as the figure size.

91
00:07:37,000 --> 00:07:39,450
Let's say we wanted this to be very wide.

92
00:07:39,500 --> 00:07:41,280
Go ahead and say 8 by 2.

93
00:07:41,650 --> 00:07:45,880
And now I have this to be 8 inches by 2 inches.

94
00:07:45,880 --> 00:07:46,510
All right.

95
00:07:46,960 --> 00:07:55,190
So you can do the same thing with subplots I could say peel t that subplots set that Fig's size member

96
00:07:55,210 --> 00:07:55,510
here.

97
00:07:55,510 --> 00:08:01,240
Now we're going to say fig axes and I'm going to go ahead and remove the axes.

98
00:08:01,330 --> 00:08:07,900
Set the figure size and the axes will go ahead and plot onto the first axes.

99
00:08:07,900 --> 00:08:15,670
I'm going to just say axes dot plot x y and I get a very similar plot.

100
00:08:15,670 --> 00:08:21,490
Now I'm going to go and specify some rows and columns for this subplot will say and Rose is equal to

101
00:08:21,490 --> 00:08:22,820
1.

102
00:08:22,870 --> 00:08:25,210
It's actually make two rows and we're going wide here.

103
00:08:25,510 --> 00:08:28,550
And then let's say we have one column.

104
00:08:28,720 --> 00:08:31,600
So and calls is equal to 1.

105
00:08:31,600 --> 00:08:34,710
Now I'm going to call 0 here.

106
00:08:34,840 --> 00:08:45,310
Plot X come a Y and then we'll say axes one dot plot y comma X. And here it can see the FIG size has

107
00:08:45,310 --> 00:08:49,220
taken this into account as far as two rows by one column.

108
00:08:49,780 --> 00:08:57,250
And as always since we have a little bit of a real up here site try saying peel teeth tightly out and

109
00:08:57,250 --> 00:09:01,750
this will attempt its best to fix up the type layout and it looks like it did a pretty good job here

110
00:09:01,790 --> 00:09:02,040
.

111
00:09:02,060 --> 00:09:07,110
There's some issues here with this y axes but I'll show you later how you can customize this y axes

112
00:09:07,120 --> 00:09:11,240
to show a little less information.

113
00:09:11,260 --> 00:09:11,590
All right.

114
00:09:11,590 --> 00:09:16,990
Now that we've finished discussing figure size and GPI Let's go ahead and make a new cell and begin

115
00:09:16,990 --> 00:09:21,090
discussing how to actually save a figure in order to save a figure.

116
00:09:21,250 --> 00:09:26,910
You can use map plot lived to generate just high quality outputs in a number of formats including pian

117
00:09:26,910 --> 00:09:28,510
GJ peg.

118
00:09:28,630 --> 00:09:37,200
SPG TGF and PTF to save a figure to a file you can use the save thig method.

119
00:09:37,500 --> 00:09:40,830
So for instance we have our figure here that we already created.

120
00:09:40,830 --> 00:09:43,610
Remember that's just right here Fig.

121
00:09:44,100 --> 00:09:50,490
And then I can save fig dot save fig and all you have to do is pass in the file name you want.

122
00:09:50,580 --> 00:09:57,720
So for instance my underscore picture and then you pass in the extension and map Cutlip is smart enough

123
00:09:57,720 --> 00:09:58,770
to know what you want.

124
00:09:58,890 --> 00:10:08,370
So if you want to PNB you say up here in G if you want to JPA you say that J peg JP G etc. and say this

125
00:10:08,380 --> 00:10:09,950
as that P and G.

126
00:10:10,950 --> 00:10:12,890
And that will automatically say the figure.

127
00:10:13,170 --> 00:10:15,470
Here you can also specify the CPI.

128
00:10:15,780 --> 00:10:20,910
So if you forgot to specify the CPI over here when you're actually creating the plot you can specify

129
00:10:20,920 --> 00:10:22,050
again DPR over here.

130
00:10:22,060 --> 00:10:27,860
So you can do this if like a 200 GPI and you can increase the DPA as you want more detail.

131
00:10:27,880 --> 00:10:28,520
All right.

132
00:10:28,830 --> 00:10:34,900
We've already got over figure titles and axes labels such as set the X label and set the y label but I'll

133
00:10:34,920 --> 00:10:36,840
show you a quick reminder of how to do that.

134
00:10:37,040 --> 00:10:44,240
We're going to change this back to just a simple fig equals Piel T-Dog figure.

135
00:10:45,210 --> 00:10:47,490
Go ahead and add a set of axes to this.

136
00:10:47,500 --> 00:10:49,980
So we'll save Fig.

137
00:10:50,120 --> 00:11:00,050
Add underscore xes we'll put them at 0 0 1 1 and then we'll say X stop plots X come a Y.

138
00:11:00,840 --> 00:11:01,380
All right.

139
00:11:01,680 --> 00:11:08,040
So as a reminder if you want to add a title you take one of these axes and you say set title and you

140
00:11:08,040 --> 00:11:14,110
just pass in a string of the title you want in order to set a y label.

141
00:11:14,280 --> 00:11:19,190
You just say set y label in a string of the y label you want.

142
00:11:19,800 --> 00:11:27,220
And then for Ex-Slave all you can do the same thing set the label you want.

143
00:11:28,660 --> 00:11:32,410
OK so I have my title my wife label and my X label.

144
00:11:32,700 --> 00:11:35,610
Let's talk about legends with legends.

145
00:11:35,620 --> 00:11:42,480
You can use label text to actually clarify what plot is what plot and I'll show you what I mean by that

146
00:11:42,480 --> 00:11:42,860
.

147
00:11:42,960 --> 00:11:53,850
I'm going to go ahead and remove this these three lines of code and say x start plot y comma X..

148
00:11:54,100 --> 00:11:56,850
So notice I'm just doing this on the same figure.

149
00:11:56,860 --> 00:12:05,580
Meaning if I say and actually run this I will get two lines here I will get the x y plot and the y exploit

150
00:12:05,580 --> 00:12:06,720
.

151
00:12:06,720 --> 00:12:10,540
Since these are quite different Let's go ahead and get something that's a little more similar.

152
00:12:10,560 --> 00:12:18,070
I'm going to go out and plot x versus x square and X versus x Q..

153
00:12:18,880 --> 00:12:19,490
All right.

154
00:12:19,710 --> 00:12:21,810
So now we have two lines here.

155
00:12:21,880 --> 00:12:26,070
And if you were just looking at this figure by itself without being able to reference the code you're

156
00:12:26,070 --> 00:12:29,790
probably a little confused as to what each plot represents.

157
00:12:29,880 --> 00:12:32,730
You wouldn't want to add in a legend in an order.

158
00:12:32,760 --> 00:12:34,120
Add in the legend.

159
00:12:34,560 --> 00:12:37,420
It's actually quite simple but it's a two step process.

160
00:12:37,500 --> 00:12:44,270
The first step is to just call X that Legin at the bottom of your code where your axes are the find

161
00:12:45,030 --> 00:12:50,260
and if you run that you will notice you get a warning it says no labeled objects found.

162
00:12:50,520 --> 00:12:52,830
And that's where the second step comes in.

163
00:12:52,830 --> 00:12:58,110
For each of these plot calls that you just made you're going to add in an argument called label and

164
00:12:58,120 --> 00:13:00,050
this label is just a string that you want.

165
00:13:00,050 --> 00:13:05,550
For the X that legend function to be able to reference let's go to show you what I mean by that we can

166
00:13:05,550 --> 00:13:13,970
go ahead and say X squared here as our label and then and this label.

167
00:13:13,980 --> 00:13:15,160
I'm going to go ahead and say

168
00:13:17,860 --> 00:13:19,620
execute.

169
00:13:21,370 --> 00:13:26,130
And now when I run this if X legend I see I've been able to create a legend.

170
00:13:26,160 --> 00:13:31,260
So all this does when you call X that legend is it looks for each of the plot calls and then checks

171
00:13:31,290 --> 00:13:33,150
to see if there's a label.

172
00:13:33,270 --> 00:13:38,880
And then the label which is just a string gets returned and gets matched up to the correct color of

173
00:13:38,880 --> 00:13:39,810
your line.

174
00:13:39,880 --> 00:13:44,190
And later on we'll show you how to actually customize your line colors.

175
00:13:44,190 --> 00:13:45,400
Now quick no is that.

176
00:13:45,390 --> 00:13:52,020
Notice how some of this legend overlaps the actual plots which you can do in the X that legend call

177
00:13:52,020 --> 00:13:55,890
in order to avoid this is specify ellos.

178
00:13:55,950 --> 00:14:01,030
Now they're actually quite a few locations you can specify and I'll show you the documentation page

179
00:14:01,030 --> 00:14:01,830
real quick for it.

180
00:14:01,840 --> 00:14:05,130
It's linked in your notebook in this section.

181
00:14:05,130 --> 00:14:09,160
Let me go ahead and go to that link so that link will take you to a page that looks like this.

182
00:14:09,240 --> 00:14:14,640
And you can click legend and there's basically a set of parameters here and there's a location code

183
00:14:14,820 --> 00:14:16,270
and a location string.

184
00:14:16,470 --> 00:14:23,280
So you can specify the best upper right upper left lower left etc. based after location code.

185
00:14:23,280 --> 00:14:28,120
I would always recommend that you just use location code 0 because that allows map lib to try to choose

186
00:14:28,120 --> 00:14:30,180
the best location for your legend.

187
00:14:30,240 --> 00:14:31,170
Let's go ahead and do that.

188
00:14:31,170 --> 00:14:37,320
We'll go in and say Alosi call 0 plot that out and if we see that the best location is over here in

189
00:14:37,380 --> 00:14:42,000
the top left let's go ahead and check out one more location code.

190
00:14:42,010 --> 00:14:48,820
If we go back here for instance if we wanted it in the center we can specify a location code 10.

191
00:14:49,620 --> 00:14:51,480
And here we have in the center.

192
00:14:51,480 --> 00:14:57,510
Now if none of these options are working for you such as 0 through 10 which you can do is you can also

193
00:14:57,510 --> 00:15:02,650
specify a tuple giving the x and y of the lower left corner of the legend.

194
00:15:02,880 --> 00:15:10,560
So for instance we can go ahead and say something like this 0.1 comma 0.1 and that means just like you

195
00:15:10,560 --> 00:15:13,100
did earlier when you're putting in an insert plot.

196
00:15:13,200 --> 00:15:17,760
You can put in a tuple here specifying the location of where you want your legend.

197
00:15:17,760 --> 00:15:19,880
Bottom corner to be.

198
00:15:19,880 --> 00:15:20,670
All right.

199
00:15:20,790 --> 00:15:22,680
That's it for this second part.

200
00:15:22,680 --> 00:15:23,590
Coming up next.

201
00:15:23,590 --> 00:15:26,310
On this last part of the map Partlow concepts lecture.

202
00:15:26,310 --> 00:15:32,040
We're going to talk about setting colors line with and line types as well as working with markers setting

203
00:15:32,040 --> 00:15:36,690
the plot range and then we'll begin to talk about some special plot types but that will lead us more

204
00:15:36,690 --> 00:15:39,150
into our discussion of seaborne.

205
00:15:39,180 --> 00:15:41,100
All right thanks everyone.

206
00:15:41,110 --> 00:15:46,010
Go ahead and post any questions you have to the Q&A forums and I'll be happy to answer them there.

207
00:15:46,020 --> 00:15:49,090
Remember to reference the notebooks for this lecture.

208
00:15:49,090 --> 00:15:50,940
OK I'll see if next lecture
