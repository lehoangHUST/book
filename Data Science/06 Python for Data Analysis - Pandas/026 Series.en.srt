1
00:00:05,850 --> 00:00:06,770
Hello everyone.

2
00:00:06,770 --> 00:00:12,180
Welcome to the serious lecture series are going to be the first main data type that will be working

3
00:00:12,180 --> 00:00:17,340
with pandas and that will build off of Ceres to work with data frames in the next lecture.

4
00:00:17,340 --> 00:00:20,610
Let's go ahead and get started by jumping to the Jupiter notebook.

5
00:00:20,670 --> 00:00:21,150
All right.

6
00:00:21,150 --> 00:00:23,720
Here I am at the Jupiter notebook.

7
00:00:23,750 --> 00:00:26,430
A series is very similar to a pie array.

8
00:00:26,430 --> 00:00:29,390
In fact it's actually built on top of a pirate object.

9
00:00:29,430 --> 00:00:35,340
But what differentiates the umpire array from a panda series is that a series of axis labels meaning

10
00:00:35,340 --> 00:00:37,410
it can be indexed by a label.

11
00:00:37,410 --> 00:00:44,260
Let's go ahead and say important umpires and P and then import Pandurs as Peetie.

12
00:00:44,910 --> 00:00:49,850
And we're going to start off with is creating various series from various object types.

13
00:00:49,920 --> 00:00:56,880
I'm going to make for Python objects or create a list called labels and this will just be three letters

14
00:00:56,880 --> 00:01:00,550
or three strings in a list A B and C.

15
00:01:01,140 --> 00:01:10,290
Then I'm going to go ahead and make a list called my underscore data and I will say it's 10 20 30.

16
00:01:11,190 --> 00:01:16,710
Then I will create an object called a r r and this will be a New Hampshire Ray and I'll just pass in

17
00:01:16,740 --> 00:01:17,940
my data.

18
00:01:18,030 --> 00:01:25,290
So one is a python list and another is a name PI array and then finally as a dictionary I will pass

19
00:01:25,290 --> 00:01:38,160
in a as a key 10 as a value B is a key 20 as a value and then C is a key and 30 has a value and that

20
00:01:38,160 --> 00:01:46,220
means I have four separate Python objects I have labels my list and then I have my data.

21
00:01:47,160 --> 00:01:51,740
I have my array and then finally I have my dictionary.

22
00:01:52,260 --> 00:01:52,850
OK.

23
00:01:53,070 --> 00:01:56,140
Let's show you how you can create a series and what it actually looks like.

24
00:01:56,220 --> 00:02:02,370
You can say PD that series and note here I'm not actually saving the series any variable name underseas

25
00:02:02,370 --> 00:02:03,870
MPD PD that series.

26
00:02:04,020 --> 00:02:08,970
But if you do shift tab here you'll notice P-T serious takes a wide variety of parameters.

27
00:02:09,030 --> 00:02:14,130
We're just going to focus right now on the data and the index which are the most important ones.

28
00:02:14,130 --> 00:02:21,000
First off we'll just passen data and also equal to my underscore data we'll just pass in that list.

29
00:02:21,000 --> 00:02:24,650
I know here I get my serious back and it looks a lot like an umpire right.

30
00:02:24,930 --> 00:02:33,200
Except here it's very distinguished that we have an index 0 1 2 and then the actual data 10 20 30 and

31
00:02:33,210 --> 00:02:40,470
the key to a panda series is that you can actually specify what you want that index to be.

32
00:02:40,530 --> 00:02:48,240
For instance I'm going to go in and say PD that series I will pass and data equal to my data and then

33
00:02:48,270 --> 00:02:52,120
I will specify that the index is equal to labels.

34
00:02:52,330 --> 00:02:54,820
And remember that's a b and c appear.

35
00:02:54,870 --> 00:02:58,850
So when I run this now I will have a labeled index series.

36
00:02:58,890 --> 00:03:04,780
So I have a as the label or the index and then 10 as the actual data point for that index.

37
00:03:04,980 --> 00:03:12,060
So unlike a number Mirei I actually have index that are labeled meaning I can call these data points

38
00:03:12,390 --> 00:03:19,980
using this labeled index and just as a quick no sense data and index are actually in order as far as

39
00:03:19,980 --> 00:03:21,510
placing them in as parameters.

40
00:03:21,600 --> 00:03:23,820
You don't have to say data equals or index equals.

41
00:03:23,880 --> 00:03:30,390
You could just say my data and then labels as such and you would also get out a series in the same manner

42
00:03:30,390 --> 00:03:30,570
.

43
00:03:30,600 --> 00:03:34,950
So you don't need to constantly specify that equals or index equals as long as you put them in the correct

44
00:03:34,980 --> 00:03:36,250
order.

45
00:03:36,300 --> 00:03:36,800
All right.

46
00:03:36,930 --> 00:03:38,550
Let's go ahead and show you a couple more ways.

47
00:03:38,550 --> 00:03:42,660
Create a series before we start working of data in a series.

48
00:03:42,660 --> 00:03:48,910
Another quick way to create a series is by saying P that series and you can pass any number higher.

49
00:03:48,930 --> 00:03:52,340
And this is going to work exactly the same as a PI fatalists.

50
00:03:52,380 --> 00:03:54,200
So here a pass in the name.

51
00:03:54,240 --> 00:03:55,550
And it worked the same way.

52
00:03:55,710 --> 00:04:00,790
And just like the list I could have also passed in labels along with this Ampyra.

53
00:04:00,900 --> 00:04:03,090
So essentially an umpire an umpire is going to work.

54
00:04:03,120 --> 00:04:09,000
Same thing as a Python list as far as passing it into a series and then finally what's really cool is

55
00:04:09,000 --> 00:04:12,350
you can say these series and just pass a dictionary.

56
00:04:12,480 --> 00:04:17,250
And what Palla's going to do is it's going to automatically take the keys of that dictionary that just

57
00:04:17,250 --> 00:04:17,800
goes to show.

58
00:04:17,800 --> 00:04:24,690
Here again take the keys that dictionary said as an index and then set the value of that key to the

59
00:04:24,840 --> 00:04:26,370
corresponding data point.

60
00:04:26,370 --> 00:04:29,460
So that's a nice fast way to quickly create a series.

61
00:04:29,460 --> 00:04:31,610
All right something to note here.

62
00:04:31,710 --> 00:04:36,630
And another thing that differentiates a pirate from the panda series is that a panda series can actually

63
00:04:36,630 --> 00:04:39,210
hold a variety of object types.

64
00:04:39,210 --> 00:04:46,920
Right now we've shown a panda series PD that series holding just numbers so for instance I've shown

65
00:04:46,920 --> 00:04:55,660
it holding just an array of numbers but it could have also hold as the data labels itself which remember

66
00:04:55,660 --> 00:04:56,630
it is labels.

67
00:04:56,640 --> 00:05:01,270
If I go ahead and run this year is just strings.

68
00:05:01,400 --> 00:05:08,800
So a series can actually hold pretty much almost any type of data object with Python as its data point

69
00:05:08,810 --> 00:05:14,240
so it can be strings and even more interesting than that you could say data equals and you could have

70
00:05:14,240 --> 00:05:22,670
actually passen built in function so I could say something like some prince Eliane and it's actually

71
00:05:22,670 --> 00:05:28,200
holding references to these built in functions as data points in this panda series.

72
00:05:28,230 --> 00:05:31,840
And that's not something you can do if a new Hampshire right now.

73
00:05:32,000 --> 00:05:36,950
You'll probably never actually use this as far as hosting functions or reference's the functions that

74
00:05:36,950 --> 00:05:42,110
Appin the series but this is just to demonstrate the flexibility of Appin the series as far as holding

75
00:05:42,110 --> 00:05:45,020
different object types.

76
00:05:45,020 --> 00:05:48,590
All right let's go ahead and move on to actually using an index.

77
00:05:48,710 --> 00:05:54,740
The key to using a series is understanding its index in Pandas makes use of these index names or numbers

78
00:05:55,010 --> 00:06:00,020
by allowing for very fast lookups of information and it works just like a hash table or a dictionary

79
00:06:00,020 --> 00:06:00,500
.

80
00:06:00,500 --> 00:06:05,100
Let's go in and see some examples of how we can grab information from a series in order to do this.

81
00:06:05,120 --> 00:06:07,250
I'm going to create two series.

82
00:06:07,250 --> 00:06:15,500
I'm going to make one called SVR one and say PD series going to passen some data will go out and say

83
00:06:15,560 --> 00:06:20,480
one two three four so just a list for my data and then for the index I'm going to go ahead and put in

84
00:06:20,480 --> 00:06:31,280
some country names such as USA will put in Germany will put in USSR and then Japan.

85
00:06:31,280 --> 00:06:35,850
So these are kind of like World War II country name references with some values.

86
00:06:35,870 --> 00:06:38,760
So go check out series one ACR 1.

87
00:06:39,440 --> 00:06:41,760
And here I have my serious notice.

88
00:06:41,780 --> 00:06:45,700
Now I have index labels and one two three four are my data points.

89
00:06:45,800 --> 00:06:48,670
And Ill say D type integer 64.

90
00:06:48,690 --> 00:06:49,790
Is this actual data points.

91
00:06:49,790 --> 00:06:51,680
Are all integers.

92
00:06:51,680 --> 00:06:54,550
Then I'm going to make series two in a very similar fashion.

93
00:06:54,560 --> 00:06:58,220
I'll say PD that series one too.

94
00:06:58,400 --> 00:07:01,200
Let's say 5:4.

95
00:07:02,570 --> 00:07:10,850
And then for the index I'll go ahead and say USA Germany and I'm going to on purpose change one of these

96
00:07:10,850 --> 00:07:18,110
we'll say Italy as another one or two country and then we'll say Japan and then if I check out series

97
00:07:18,110 --> 00:07:21,140
two I get one to 5 4.

98
00:07:21,150 --> 00:07:24,360
So Italy is different here and has a different data point.

99
00:07:24,380 --> 00:07:29,720
Now if I actually want to grab information out of the series it's going to work very similar to grabbing

100
00:07:29,720 --> 00:07:35,420
information out of a python dictionary type in the series and then as a string you can go ahead and

101
00:07:35,420 --> 00:07:39,950
type in the actual index label USA.

102
00:07:39,950 --> 00:07:44,980
Now keep in mind I'm typing this as a string because I know that the index is a string.

103
00:07:45,020 --> 00:07:51,230
If I'm working for a series such as up here that has 0 1 or 2 you were just passing an integer.

104
00:07:51,230 --> 00:07:54,990
It depends on what data type is your actual index.

105
00:07:55,010 --> 00:07:55,950
All right.

106
00:07:56,360 --> 00:07:59,710
Usually your index is going to be hopefully either a number or a string.

107
00:07:59,810 --> 00:08:07,480
Neither passen se or one and then the string or ACR one and whatever your integer indexes.

108
00:08:07,490 --> 00:08:12,480
So for example if I quickly create another series such as SC or three.

109
00:08:12,560 --> 00:08:20,210
Well go ahead and say PD that series and we'll just pass in that data as labels.

110
00:08:20,570 --> 00:08:22,800
I check C or three.

111
00:08:23,000 --> 00:08:24,980
Now I have ABC as my data points.

112
00:08:24,980 --> 00:08:28,670
The type is an object which kind of refers to the fact that it's a string.

113
00:08:28,880 --> 00:08:34,310
And I can grab stuff out of this by the integer index which is kind of typically how you would do this

114
00:08:34,310 --> 00:08:35,510
for a number higher.

115
00:08:35,840 --> 00:08:36,800
And then there's a string.

116
00:08:36,860 --> 00:08:38,370
A return to me.

117
00:08:38,420 --> 00:08:43,610
So you just pass in the actual index label it will return the data that corresponds to the index label

118
00:08:43,610 --> 00:08:44,000
.

119
00:08:44,180 --> 00:08:49,750
As far as very basic operations to do a series they're usually done based off the index.

120
00:08:49,760 --> 00:08:56,960
Meaning if I were to say something like or 1 and then we have C or two and let's say I try to add these

121
00:08:56,960 --> 00:09:00,080
so I say SE1 plus S-E are two.

122
00:09:00,320 --> 00:09:04,970
What's going to happen is it's going to try to match up the operation based off the index that's going

123
00:09:04,970 --> 00:09:08,620
to say USA is one here and USA is one here.

124
00:09:08,630 --> 00:09:14,480
So they'll add them up and say as a result USA will be equal to to where it cannot find the match.

125
00:09:14,510 --> 00:09:16,060
Such as Italy.

126
00:09:16,070 --> 00:09:19,690
It will put a NULL and then USSR is also not a for them.

127
00:09:19,730 --> 00:09:23,980
So it's going to also put a neon object there let's go and see what happens when we run this.

128
00:09:24,530 --> 00:09:30,920
And there we see the results so USA was 2.0 Japan was 8.00 Germany was 4.0 and then work didn't find

129
00:09:30,920 --> 00:09:31,380
the match.

130
00:09:31,400 --> 00:09:33,370
It went ahead and put it in null value.

131
00:09:33,650 --> 00:09:38,870
Something to note here is that when you're performing operations with a Pandurs series and really pretty

132
00:09:38,870 --> 00:09:44,730
much almost any name pyre Panda's base object you're integers are going to be converted into floats

133
00:09:44,740 --> 00:09:44,950
.

134
00:09:45,050 --> 00:09:50,480
And that's so you don't accidentally lose information based off of some weird division and that has

135
00:09:50,480 --> 00:09:51,870
to do more of Python too.

136
00:09:52,040 --> 00:09:57,680
And the fact that true vision versus class division is actually differentiated in the older version

137
00:09:57,690 --> 00:09:57,850
.

138
00:09:58,100 --> 00:10:02,630
If you're using Python 3 basically not to worry about this but you just have to keep in mind that panderers

139
00:10:02,630 --> 00:10:09,290
and MPI will always convert stuff to flow in order to retain all the information possible.

140
00:10:09,720 --> 00:10:15,380
OK we'll go ahead and stop here for now and move on to data frames which can expand a lot more on the

141
00:10:15,380 --> 00:10:19,410
concept of series in order to fully understand data frames.

142
00:10:19,460 --> 00:10:23,870
You just need to know the basics of series which is just that they have labelled index and then a data

143
00:10:23,870 --> 00:10:27,770
point really throughout this course we're not going to be working too much with series.

144
00:10:27,770 --> 00:10:32,190
We're going to be working a lot more with data frames which is the true workhorse of pandas.

145
00:10:32,210 --> 00:10:33,980
Let's go ahead and jump to the next lecture.

146
00:10:33,990 --> 00:10:37,400
We'll talk a lot more detail about pand those data frames.

147
00:10:37,400 --> 00:10:39,510
Thanks everyone and I'll see you at the next lecture.
