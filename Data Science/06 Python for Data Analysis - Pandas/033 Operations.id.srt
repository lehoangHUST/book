1
00:00:05,400 --> 00:00:10,170
Halo semuanya dan selamat datang di kuliah operasi kuliah ini. Kami hanya akan

2
00:00:10,170 --> 00:00:15,090
meninjau beberapa operasi paling penting untuk panda serta mempelajari beberapa operasi yang bermanfaat yang belum

3
00:00:15,090 --> 00:00:15,930
kami lewati.

4
00:00:16,290 --> 00:00:19,850
Ayo maju dan lompat ke notebook Jupiter untuk memulai.

5
00:00:19,860 --> 00:00:20,160
Baiklah.

6
00:00:20,160 --> 00:00:22,020
Di sini saya di notebook Jupiter.

7
00:00:22,020 --> 00:00:26,520
Saya pergi ke depan dan hanya menyalin sel pertama dari operasi adalah buku yang sesuai dengan

8
00:00:26,850 --> 00:00:28,830
kuliah ini untuk membuat kerangka data ini.

9
00:00:28,830 --> 00:00:30,060
Itu hanya memiliki tiga kolom.

10
00:00:30,060 --> 00:00:37,940
Panggil 1 panggilan ke panggilan 3 dan memiliki indeks angka adil 0 1 2 3 dan panggilan 1 kami memiliki 4 digit dan disebut

11
00:00:37,940 --> 00:00:38,520
2.

12
00:00:38,700 --> 00:00:40,550
Kami memiliki empat angka di sini.

13
00:00:40,680 --> 00:00:46,460
Tetapi perhatikan bahwa 4 4 4 diulang dan kemudian memanggil 3 kita hanya memiliki empat set string.

14
00:00:46,470 --> 00:00:49,780
Mari kita bicara tentang menemukan nilai unik dalam bingkai data.

15
00:00:49,800 --> 00:00:56,460
Ada tiga metode berguna utama yang berkaitan dengan menemukan nilai unik dalam bingkai data.

16
00:00:56,460 --> 00:01:00,570
Bayangkan Anda ingin menemukan semua nilai unik di kolom dua.

17
00:01:00,690 --> 00:01:07,590
Metode yang dapat kita gunakan untuk itu hanyalah metode unik dan ini akan mengembalikan tingkat yang lebih tinggi

18
00:01:07,590 --> 00:01:13,110
dari semua nilai unik di kolom dua daripada benar-benar menginginkan array nilai unik.

19
00:01:13,110 --> 00:01:16,960
Katakanlah Anda hanya benar-benar menginginkan jumlah nilai itu sendiri.

20
00:01:16,980 --> 00:01:18,600
Nah ada dua metode untuk ini.

21
00:01:18,630 --> 00:01:24,930
Anda bisa memeriksa panjang larik yang dikembalikan dan jenis respons terhadap 3 atau 3 nilai unik

22
00:01:24,930 --> 00:01:26,210
di kolom 2.

23
00:01:26,580 --> 00:01:31,740
Tapi Halo sebenarnya memiliki metode bawaan untuk ini dan itu hanya dan unik.

24
00:01:31,770 --> 00:01:34,670
Dan jika saya menjalankan sel saya mendapatkan jawaban yang sama.

25
00:01:34,740 --> 00:01:35,190
Baiklah.

26
00:01:35,280 --> 00:01:36,600
Jadi kita punya keunikan.

27
00:01:37,110 --> 00:01:40,750
Untuk aktual mengembalikan array nilai unik dan unik.

28
00:01:41,010 --> 00:01:46,890
Jika saya ingin jumlah nilai unik, fungsi yang kurang berguna yang ingin saya tunjukkan adalah nilai yang diperhitungkan.

29
00:01:46,950 --> 00:01:52,470
Dan ini pada dasarnya berarti jika Anda ingin tabel nilai unik dan berapa kali

30
00:01:52,470 --> 00:01:57,300
mereka muncul Anda hanya dapat menggunakan nilai garis bawah nilai sebagai metode.

31
00:01:57,420 --> 00:02:00,440
Jalankan ini dan ini kembali.

32
00:02:00,660 --> 00:02:03,980
Berapa kali setiap nilai unik terjadi di kolom itu.

33
00:02:04,010 --> 00:02:09,810
Dalam hal ini 4 4 4 terjadi dua kali dan angka lainnya terjadi masing-masing satu kali.

34
00:02:09,810 --> 00:02:14,490
Baiklah, itu adalah tiga metode yang sangat berguna dan Anda akan sering menggunakannya dalam latihan.

35
00:02:15,210 --> 00:02:18,390
Mari kita lanjutkan dan berbicara tentang memilih data.

36
00:02:18,480 --> 00:02:24,300
Kami sudah membahas seleksi bersyarat, tetapi saya ingin menekankan kembali betapa pentingnya hal itu

37
00:02:24,300 --> 00:02:26,420
dan seberapa kuatnya sebagai alat.

38
00:02:26,610 --> 00:02:33,810
Kami memiliki kerangka data DMF kami dan kami dapat menggunakan seleksi bersyarat dengan mengirimkan pernyataan pemilihan

39
00:02:33,810 --> 00:02:41,160
bersyarat seperti mengatakan mengembalikan T. F. di mana kolom 1 lebih besar dari 2.

40
00:02:41,250 --> 00:02:46,410
Dan ini akan mengembalikan semua baris bingkai data di mana kolom 1 lebih besar dari 2.

41
00:02:46,500 --> 00:02:53,920
Ingatlah bahwa perintah di dalam ini pada dasarnya hanyalah serangkaian boolean dari False False True true.

42
00:02:54,000 --> 00:03:00,630
Sekarang sebagai pengingat cepat jika Anda ingin menggabungkan kondisi Anda dapat membungkus kondisi ini dalam tanda kurung dan

43
00:03:02,070 --> 00:03:05,090
kemudian menggunakan baik ampersand atau operator pipa.

44
00:03:05,220 --> 00:03:07,140
Sen jika Anda mau dan atau.

45
00:03:07,410 --> 00:03:15,090
Dan kemudian Anda dapat mengatakan dalam kondisi lain seperti di mana dipanggil untuk mengirim Anda memiliki string memiliki

46
00:03:15,090 --> 00:03:21,600
kualitas dengan 4 4 4 dan mengembalikan hanya baris terakhir 3 dan di sana.

47
00:03:21,900 --> 00:03:23,000
BAIK.

48
00:03:23,000 --> 00:03:26,640
Jadi hanya pengingat cepat tentang bagaimana memilih data menggunakan seleksi bersyarat.

49
00:03:26,910 --> 00:03:33,030
Sekarang mari kita bicara tentang metode terapan metode terapan akan menjadi salah satu alat paling kuat di sabuk

50
00:03:33,120 --> 00:03:35,180
alat Anda saat menggunakan panderer.

51
00:03:35,400 --> 00:03:38,080
Jadi mari kita keluar dan menunjukkan cara kerjanya.

52
00:03:38,190 --> 00:03:52,640
Magin kita memiliki fungsi DPF 2 kali yang mengambil nilai X dan kemudian mengembalikan katakanlah X kali 2.

53
00:03:52,650 --> 00:03:54,920
Baiklah fungsi yang sangat sederhana.

54
00:03:55,020 --> 00:04:01,740
Sekarang Anda tahu bahwa Anda sudah dapat mengambil misalnya kolom dan memanggil fungsi bawaannya

55
00:04:01,890 --> 00:04:05,660
seperti jumlah dan yang mengembalikan jumlah kolom.

56
00:04:05,700 --> 00:04:10,270
Tetapi bagaimana jika Anda ingin menerapkan fungsi kustom Anda sendiri seperti waktu terlalu baik.

57
00:04:10,320 --> 00:04:11,840
Memiliki kemampuan untuk melakukan itu.

58
00:04:11,880 --> 00:04:18,300
Anda bisa saja mengatakan nama kolom dan kemudian menerapkan dan kemudian Anda hanya meneruskan fungsi apa pun

59
00:04:18,300 --> 00:04:25,830
yang Anda ingin menerapkan kasus ini kita akan pergi ke depan dan menerapkan waktu ke dan ini akan menyiarkan fungsi

60
00:04:25,830 --> 00:04:29,990
itu ke setiap elemen di kolom itu 2 4 6 8.

61
00:04:30,000 --> 00:04:33,040
Anda juga dapat menerapkan fungsi bawaan seperti panjang.

62
00:04:33,120 --> 00:04:37,820
Sebagai contoh jika kita melihat pada kolom tiga, kita memiliki banyak string.

63
00:04:37,860 --> 00:04:41,370
Katakanlah kita menginginkan sebuah kolom yang ada di sepanjang setiap string.

64
00:04:41,370 --> 00:04:47,520
Kalau begitu kita bisa mengatakan berlaku langsung Elyon dan yang mengembalikan panjang aliran yang dalam

65
00:04:47,520 --> 00:04:50,880
hal ini adalah 3 untuk semua string berlaku.

66
00:04:50,880 --> 00:04:54,530
Ini akan menjadi sangat kuat ketika Anda menggabungkannya dengan ekspresi tanah.

67
00:04:54,570 --> 00:04:58,030
Dengan begitu Anda tidak perlu meluangkan waktu untuk mendefinisikan seluruh fungsi.

68
00:04:58,050 --> 00:05:02,580
Jika Anda hanya akan menerapkannya sekali misalnya mari kita lanjutkan dan membuat ekspresi lampu

69
00:05:02,580 --> 00:05:03,700
dari kali 2.

70
00:05:03,870 --> 00:05:12,960
Saya akan pergi keluar dan mengatakan Lamda X usus besar dan kemudian hanya x kali 2 saya akan menerapkan ini

71
00:05:12,990 --> 00:05:13,920
untuk memanggilnya.

72
00:05:14,370 --> 00:05:16,160
Mari kita lanjutkan dan lihat bagaimana ini bekerja.

73
00:05:16,820 --> 00:05:17,600
Dan begitulah.

74
00:05:17,680 --> 00:05:23,050
Kami dapat mengalikan setiap nilai dalam kolom itu dengan dua dan kami dapat melakukan ini

75
00:05:23,040 --> 00:05:25,220
tanpa harus menulis seluruh fungsi untuknya.

76
00:05:25,240 --> 00:05:29,340
Kami hanya melakukan ini sebagai ekspresi anak domba dan ini adalah jenis hal yang akan Anda

77
00:05:29,340 --> 00:05:31,830
gunakan setiap saat saat Anda semakin nyaman dengan panda.

78
00:05:31,830 --> 00:05:36,150
Ini mungkin salah satu fitur paling kuat dari pantless kemampuan untuk menerapkan ekspresi

79
00:05:36,150 --> 00:05:38,280
atau fungsi lambda kustom Anda sendiri.

80
00:05:38,280 --> 00:05:42,680
Baiklah mari kita bicara tentang menghapus Combs lagi.

81
00:05:42,690 --> 00:05:46,110
Jika ada, katakanlah hapus.

82
00:05:46,120 --> 00:05:47,580
Kolom satu.

83
00:05:47,580 --> 00:05:55,360
Kita bisa mengatakan drop ZF melewati kolom yang ingin kita gambar c o l 1.

84
00:05:55,380 --> 00:06:00,250
Dan kemudian ingat karena pada kolom kita harus menentukan akses sama dengan 1.

85
00:06:00,570 --> 00:06:04,070
Dan ini akan menjatuhkan kolom itu jika kita ingin ini terjadi pada tempatnya.

86
00:06:04,200 --> 00:06:09,580
Kami harus menentukan di tempat sama dengan benar.

87
00:06:09,720 --> 00:06:11,800
Mari kita pergi dan tidak menjalankannya.

88
00:06:11,810 --> 00:06:17,790
Jadi kami menyimpan bingkai data asli kami jika Anda ingin mendapatkan kolom dan nama indeks dari bingkai data.

89
00:06:18,090 --> 00:06:21,070
Itu sebenarnya hanya atribut dari kerangka data itu sendiri.

90
00:06:21,370 --> 00:06:29,050
Berarti Anda bisa mengatakan kolom DF akan mengembalikan objek indeks semacam ini pada dasarnya hanya daftar nama

91
00:06:29,040 --> 00:06:29,800
kolom.

92
00:06:29,810 --> 00:06:34,930
Ini akan sangat berguna ketika Anda mencoba untuk mengindeks kolom dan mungkin spasinya aneh atau

93
00:06:34,920 --> 00:06:37,500
Anda tidak dapat mengetahui apa string itu.

94
00:06:37,500 --> 00:06:40,940
Anda bisa memanggil kolom DFA atau apa pun nama bingkai data Anda.

95
00:06:41,040 --> 00:06:46,170
Dan saya akan mengembalikan daftar nama kolom ini dan Anda benar-benar dapat melakukan hal yang sama untuk indeks.

96
00:06:46,360 --> 00:06:49,540
Anda dapat mengatakan indeks DFA yang akan memberi Anda informasi indeks.

97
00:06:49,770 --> 00:06:55,830
Kasus ini karena ini merupakan rentang indeks yang sebenarnya hanya melaporkan kembali mulai berhenti dan

98
00:06:55,830 --> 00:06:57,360
ukuran langkah indeks.

99
00:06:57,370 --> 00:07:01,800
Baiklah mari kita bicara tentang menyortir dan memesan bingkai data.

100
00:07:02,000 --> 00:07:07,880
Di sini kami memiliki napas dalam-dalam dan bayangkan Anda ingin mengurutkannya dengan kolom 2.

101
00:07:08,130 --> 00:07:13,890
Pada dasarnya kita ingin 4 4 4 dan 4 untuk 4 lagi sebelum kita melihat 5 5 5 dan 6 6.

102
00:07:14,040 --> 00:07:17,330
Kita dapat menggunakan nilai sortir untuk melakukan ini.

103
00:07:18,150 --> 00:07:22,750
Anda disebut DMF saur nilai garis bawah.

104
00:07:22,920 --> 00:07:28,200
Dan kemudian sebagai argumen yang Anda katakan sekarang kami telah memeriksa tab shift di sini kita bisa

105
00:07:28,200 --> 00:07:32,280
mengatakan selamat tinggal dan Anda bisa memesan ini baik dari baris atau kolom.

106
00:07:32,280 --> 00:07:36,910
Namun intinya Anda hanya Pessin sebagai argumen kolom yang ingin Anda urutkan berdasarkan.

107
00:07:36,960 --> 00:07:43,580
Jadi saya ingin menyortir ini dengan kolom 2 dan Anda bisa mengatakan kolom hanya untuk shift seperti itu masuk.

108
00:07:43,600 --> 00:07:50,280
Dan sekarang saya memiliki semacam kerangka bingkai demi kolom untuk mengetahui bagaimana indeks tetap melekat pada baris.

109
00:07:50,310 --> 00:07:52,520
Jadi Anda tidak pernah kehilangan informasi itu di sana.

110
00:07:52,920 --> 00:07:59,220
Dan itu hal yang sama dengan hanya mengatakan pada kolom dua hal yang sama karena itu diharapkan

111
00:07:59,230 --> 00:08:00,350
menjadi argumen pertama.

112
00:08:01,020 --> 00:08:01,440
Baiklah.

113
00:08:01,830 --> 00:08:04,370
Mari kita bicara tentang beberapa operasi yang lebih bermanfaat.

114
00:08:04,530 --> 00:08:12,410
Metode yang sangat berguna untuk menemukan tidak ada nilai dalam bingkai data Anda adalah DFT adalah nol dan ini

115
00:08:12,410 --> 00:08:17,940
akan mengembalikan bingkai data boolean yang menunjukkan apakah nilainya nol atau tidak.

116
00:08:17,940 --> 00:08:23,340
Dalam hal ini kita mendapatkan boolean dari semua kesalahan karena kita telah mengetahui nol dalam bingkai data kita.

117
00:08:23,350 --> 00:08:23,730
Baiklah.

118
00:08:23,740 --> 00:08:29,690
Sekarang mari kita bicara tentang satu fungsi atau metode terakhir dalam pantless bernama tabel pivot

119
00:08:29,940 --> 00:08:33,890
Dan metodologi ini akan sangat familiar bagi pengguna Advanced Excel.

120
00:08:34,000 --> 00:08:40,340
Saya akan melanjutkan dan menyalin dan menempelkan beberapa kode dari buku catatan untuk membuat bingkai data baru.

121
00:08:41,080 --> 00:08:44,210
Kami keluar dan memeriksa keadaan kerangka kami memiliki sesuatu yang terlihat seperti ini.

122
00:08:44,250 --> 00:08:46,820
Kami memiliki kolom b c dan d.

123
00:08:47,460 --> 00:08:54,010
Dan perhatikan di sini bahwa kita memiliki nilai berulang di kolom A kolom B dan kolom

124
00:08:54,000 --> 00:08:57,850
C kolom Foo dan bar B memiliki satu dua.

125
00:08:58,050 --> 00:09:04,950
C memiliki X dan bijaksana dan kemudian D memiliki beberapa nilai integer Anda dapat menggunakan tabel pivot DFT.

126
00:09:04,950 --> 00:09:09,600
Buat tabel pivot dan jika Anda tidak terbiasa dengan Pivot Tables, saya tidak akan terlalu

127
00:09:09,960 --> 00:09:15,120
khawatir tentang hal ini, tetapi jika Anda mungkin pengguna Excel yang akrab dengan Pivot Tables, Semoga fungsi

128
00:09:15,120 --> 00:09:15,760
ini bermanfaat.

129
00:09:16,000 --> 00:09:21,810
Pada dasarnya di mana kita akan lakukan untuk tidak unggul pengguna hanya membuat indeks multi dari tabel

130
00:09:22,170 --> 00:09:23,940
ini atau bingkai data.

131
00:09:24,420 --> 00:09:33,600
Metode untuk melakukannya adalah dengan memberikan tabel garis bawah dan tabel garis bawah pivot menggunakan tiga

132
00:09:34,000 --> 00:09:37,450
argumen utama, nilai indeks dan kolom.

133
00:09:37,500 --> 00:09:43,050
Dalam hal ini, mari kita lanjutkan dan mengindikasikan bahwa nilai yang kita inginkan dalam tabel kita adalah nilai-nilai ini.

134
00:09:43,060 --> 00:09:44,250
Inilah yang sebenarnya kita inginkan.

135
00:09:44,250 --> 00:09:47,270
Data frame data poin yang akan dibuat.

136
00:09:47,280 --> 00:09:52,140
Jadi saya akan mengatakan nilai sama dengan kolom D.

137
00:09:53,040 --> 00:09:59,950
Dan kemudian saya akan mengatur indeks saya menjadi sama dengan kolom A dan kolom B dan itu pada dasarnya

138
00:09:59,940 --> 00:10:03,200
akan membuat a dan b menjadi indeks bertingkat.

139
00:10:03,210 --> 00:10:09,760
Jadi pergi ke daftar penumpang maka karena itu lebih dari satu indeks kolom dan B.

140
00:10:09,780 --> 00:10:14,950
Dan akhirnya saya ingin kolom aktual saya didefinisikan oleh kolom C.

141
00:10:15,070 --> 00:10:21,810
Kasus ini hanya melihat bahwa saya lulus dalam daftar di sini dan perhatikan bahwa saya katakan Lihat itu akan menjadi

142
00:10:21,820 --> 00:10:22,320
kolom.

143
00:10:22,330 --> 00:10:25,860
Jadi saya harus berakhir dengan kolom untuk X dan kolom untuk y.

144
00:10:25,870 --> 00:10:28,360
Mari kita lanjutkan dan lihat bagaimana ini bekerja.

145
00:10:28,470 --> 00:10:34,390
Saya akan menjalankan ini sekali lagi di sini sehingga kita dapat membandingkan bingkai data asli versus

146
00:10:34,380 --> 00:10:36,930
tabel pivot yang akan saya buat.

147
00:10:36,930 --> 00:10:38,970
Baiklah jadi saya menjalankan perintah tabel pivot ini.

148
00:10:39,180 --> 00:10:41,220
Dan mari kita masuk dan membandingkan keduanya.

149
00:10:41,400 --> 00:10:47,580
Tampak seperti indeks yang dibuat dari kolom B dan sehingga masuk akal lexically bar dan foo dan

150
00:10:47,590 --> 00:10:54,780
kemudian satu dan dua diulang maka kolom yang sebenarnya saya inginkan di mana nilai-nilai dalam kasus ini hanya X dan

151
00:10:54,780 --> 00:10:58,410
Y dan nilai-nilai titik data aktual adalah kolom D.

152
00:10:58,600 --> 00:11:03,820
Tidak, saya tidak memiliki beberapa nilai di sini karena tidak ada nilai yang cocok untuk titik tertentu.

153
00:11:04,200 --> 00:11:11,130
Berarti jika saya melihat kembali bingkai data asli tidak ada nilai yang berlaku dengan bilah ke x.

154
00:11:11,130 --> 00:11:16,130
Jadi jika Anda melihat di sini, Anda tidak akan menemukan tong ke X. Anda hanya akan menemukan bagian 2 y.

155
00:11:16,750 --> 00:11:19,550
Dan juga makanan untuk y.

156
00:11:19,600 --> 00:11:25,850
Tidak ada makanan mengapa hanya ada makanan untuk X dan itu sebabnya kami harus mengisi tidak ada nilai di sini.

157
00:11:25,920 --> 00:11:26,500
BAIK.

158
00:11:26,560 --> 00:11:31,320
Jangan ragu untuk memposting Q&amp;A jika Anda memiliki lebih banyak pertanyaan tentang Pivot Tables atau ingin beberapa sumber

159
00:11:31,330 --> 00:11:32,950
lain untuk contoh di Pivot Tables.

160
00:11:32,940 --> 00:11:34,870
Kami tidak akan benar-benar menggunakannya dalam kursus.

161
00:11:34,870 --> 00:11:39,630
Sebenarnya hanya ada satu pertanyaan latihan di mana kita bekerja dengan peta panas sejauh

162
00:11:39,630 --> 00:11:41,180
bagaimana menggunakan tabel pivot.

163
00:11:41,250 --> 00:11:45,930
Tetapi untuk saat ini, hanya khawatirkan diri Anda dengan mereka jika Anda sudah terbiasa dengan tabel pivot dari

164
00:11:46,000 --> 00:11:46,970
sesuatu seperti Excel.

165
00:11:47,110 --> 00:11:47,770
BAIK.

166
00:11:47,940 --> 00:11:50,100
Saya harap beberapa operasi ini bermanfaat bagi Anda.

167
00:11:50,130 --> 00:11:55,340
Mereka hanya melihat sekumpulan fungsi dan metode berguna yang tersedia untuk Anda di panas.

168
00:11:55,470 --> 00:12:01,440
Anda dapat melanjutkan dan merujuk notebook kuliah operasi panda yang ada di bawah

169
00:12:01,470 --> 00:12:02,510
folder panderers.

170
00:12:02,520 --> 00:12:04,580
Terima kasih semuanya dan saya akan melihat di kuliah berikutnya
