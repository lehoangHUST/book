1
00:00:05,580 --> 00:00:09,150
Hello everyone and welcome to the data frames per 3 lecture.

2
00:00:09,540 --> 00:00:14,380
In this final lecture that data frame's series of lectures we're going to learn about multa index and

3
00:00:14,380 --> 00:00:15,920
index higher key.

4
00:00:15,930 --> 00:00:20,370
Well first create a quick example of what a multi indexed data looks like and then how you can work

5
00:00:20,370 --> 00:00:23,670
with data frames to have a multilevel index.

6
00:00:23,670 --> 00:00:26,990
Let's go ahead and jump to Jupiter notebook to get started.

7
00:00:27,000 --> 00:00:27,390
All right.

8
00:00:27,390 --> 00:00:29,470
Here I am at the Jupiter notebook.

9
00:00:29,580 --> 00:00:35,370
What I'm going to go ahead and do is copy and paste some lines of code that are available for you in

10
00:00:35,370 --> 00:00:37,850
your notebook called Data frames.

11
00:00:37,860 --> 00:00:43,440
If you scroll down until you get to the multi Index index higher key section you'll see these four lines

12
00:00:43,440 --> 00:00:44,290
of code.

13
00:00:44,310 --> 00:00:48,130
These are the four lines of code are going to use to actually build this data frame.

14
00:00:48,330 --> 00:00:50,140
We can go ahead and check this out.

15
00:00:50,340 --> 00:00:55,450
We'll say outside and that's just the list.

16
00:00:55,470 --> 00:01:02,970
So we have three or six items in this list of two different types G1 G1 G1 and then G-2 DTG 2 we have

17
00:01:03,030 --> 00:01:07,700
inside which is 1 2 3 1 2 3.

18
00:01:08,010 --> 00:01:16,110
And then when we went ahead and did was using the zip function along with the list function as we said

19
00:01:16,140 --> 00:01:23,580
higher index we went ahead and used zip and LIST on this in order to make this into a list of tuple

20
00:01:23,580 --> 00:01:29,790
pairs G 1 1 1 2 1 3 2 1 2 2 2 3.

21
00:01:30,000 --> 00:01:35,050
And then I passed it into a special function from panderers and we were actually won't be working with

22
00:01:35,070 --> 00:01:41,910
this function at all throughout the course but this is just for a customization of making a data frame

23
00:01:41,940 --> 00:01:44,960
so don't worry too much about it but I just want you to be aware of it.

24
00:01:44,970 --> 00:01:49,820
Its PD that multi-band index from tuples and it can basically take in a list that looks like this and

25
00:01:49,830 --> 00:01:51,870
create a multi index from it.

26
00:01:52,140 --> 00:01:56,800
So after you get done with that youll get this multi index with several levels.

27
00:01:56,800 --> 00:02:01,890
Do you want me to add one level one to three as another level and then labels and I will go and explain

28
00:02:01,890 --> 00:02:04,610
what all that means as we create this data frame.

29
00:02:04,680 --> 00:02:09,780
But for now you can just feel free to copy and paste this code directly from the notebook since its

30
00:02:09,780 --> 00:02:14,850
not important as far as creating that data frame from scratch.

31
00:02:15,520 --> 00:02:27,360
We'll go in and say PD data frame passen Rande and 6 Com 2 so we have 6 rows by two columns and then

32
00:02:27,420 --> 00:02:33,660
I'm going to set the index to be the higher index object we just made and then I will set the columns

33
00:02:33,660 --> 00:02:38,440
to be a list a and b.

34
00:02:39,210 --> 00:02:39,700
All right.

35
00:02:39,720 --> 00:02:43,740
And you can feel free to copy and paste all this code from the notebooks because it's not that important

36
00:02:43,740 --> 00:02:44,010
.

37
00:02:44,010 --> 00:02:48,650
This is just for actually constructing a multi index level data frame.

38
00:02:48,700 --> 00:02:50,850
Let me show you what I mean by that here.

39
00:02:50,940 --> 00:02:55,110
If I actually show the data frame I can see that it has two levels of an index.

40
00:02:55,110 --> 00:02:57,240
It has this Jiwon and G-2 level.

41
00:02:57,420 --> 00:03:02,580
And then this sub or insight level one two three one two three and then two columns.

42
00:03:02,730 --> 00:03:07,200
And this is a data frame looks like it has multi-levels of an index.

43
00:03:07,200 --> 00:03:09,870
Otherwise known as an index higher key.

44
00:03:09,870 --> 00:03:15,970
Let's go ahead and show how we can actually call data from a multilevel index for this index hierarchy

45
00:03:15,970 --> 00:03:16,110
.

46
00:03:16,140 --> 00:03:20,740
We can go ahead and do is say DMF L-O see.

47
00:03:21,780 --> 00:03:27,630
And then we can go ahead and using Bracton notation GRABBE from the very outside index.

48
00:03:27,630 --> 00:03:34,560
For instance if I want everything that's under G 1 I can just passen she one and I get that little sub

49
00:03:34,560 --> 00:03:41,730
data frame in return which is basically the first three rows for those two columns and then I can continue

50
00:03:41,820 --> 00:03:49,870
indexing off of this such as I'll see or ellos see either one is fine.

51
00:03:50,580 --> 00:03:56,300
And then passing in number and that will actually then return these two items here as a series.

52
00:03:56,310 --> 00:04:04,360
So the basic idea is you call from the outside index continue calling inside deeper.

53
00:04:04,380 --> 00:04:08,080
If you actually want to name these index names.

54
00:04:08,130 --> 00:04:09,720
So right now they are unnamed.

55
00:04:09,720 --> 00:04:14,910
That's notified about the fact that there's no name in these two cells which can go out into say DMF

56
00:04:15,330 --> 00:04:16,340
index.

57
00:04:16,440 --> 00:04:21,610
Names do shift enter and you should get a frozen list that's none none.

58
00:04:21,630 --> 00:04:24,900
And this is just a panderers index names object types.

59
00:04:25,110 --> 00:04:31,230
All it's saying here is that these indices don't have any names but you can go ahead and do say equals

60
00:04:32,640 --> 00:04:34,900
and then pass in a list of names.

61
00:04:34,980 --> 00:04:40,450
For instance let's go out and call this outside index groups because it's first G.

62
00:04:40,770 --> 00:04:45,300
And then we'll call the insight index and you m for numbers.

63
00:04:45,300 --> 00:04:53,460
And now when I call my data frame we have groups as a labeled index on the outside and numb as a label

64
00:04:53,460 --> 00:04:55,220
index on the inside.

65
00:04:55,290 --> 00:04:57,610
And this could have as many layers as you want.

66
00:04:57,870 --> 00:05:03,210
Hopefully you can begin to see how this would be useful for multilevel index information that you want

67
00:05:03,210 --> 00:05:05,260
to use along of a data frame.

68
00:05:05,790 --> 00:05:10,800
Let's go ahead and show you how we can grab information off of this one more time.

69
00:05:10,800 --> 00:05:13,270
Imagine you want to grab this value right here.

70
00:05:13,290 --> 00:05:16,540
0.07 to the one to have highlighted.

71
00:05:16,830 --> 00:05:22,580
Well that's under G-2 number two column B.

72
00:05:22,940 --> 00:05:26,200
Let's start from the outside and work our way in.

73
00:05:26,250 --> 00:05:37,290
We'll go ahead and specify that we wants C G to and that returns this data frame.

74
00:05:37,290 --> 00:05:39,250
Again we're looking for this value here.

75
00:05:39,270 --> 00:05:48,040
So let's go ahead and do one more index and we can go ahead and call here too.

76
00:05:48,960 --> 00:05:52,340
And then we have under column B or index B.

77
00:05:52,350 --> 00:05:55,320
Excuse me for the series 0.07.

78
00:05:55,500 --> 00:06:01,350
So then finally we just call B at the end and that's all we can grab all the way from the outside the

79
00:06:01,350 --> 00:06:03,900
inside this particular value.

80
00:06:04,010 --> 00:06:06,480
What you should do now is pause the video.

81
00:06:06,540 --> 00:06:12,220
Select another value and see if you can successfully index it and return it back.

82
00:06:12,360 --> 00:06:12,850
OK.

83
00:06:12,960 --> 00:06:14,600
Hopefully you're able to do that.

84
00:06:14,610 --> 00:06:20,190
Let's go ahead and show you one last very useful function called cross section and it's going to be

85
00:06:20,260 --> 00:06:23,100
x x.

86
00:06:23,970 --> 00:06:28,680
So this returns a cross section of rows or columns from a series of data frame and you're going to use

87
00:06:28,680 --> 00:06:32,490
this when you have a multilevel index.

88
00:06:32,490 --> 00:06:36,020
So again our data frame looks like this.

89
00:06:36,030 --> 00:06:43,820
Let's say we wanted to grab everything that was under G 1 I could do what I just showed you EHLO C G

90
00:06:44,060 --> 00:06:48,190
1 and that returns the data from energy 1.

91
00:06:48,360 --> 00:06:56,940
But another option for a multilevel index is using this X as the cross section and then passing in Jiwon

92
00:06:57,000 --> 00:06:58,260
also has a string.

93
00:06:58,620 --> 00:07:06,180
But what's nice about this cross section is it has the ability to skip or go inside a multilevel index

94
00:07:06,180 --> 00:07:06,500
.

95
00:07:06,540 --> 00:07:14,730
For example let's say I have this data frame here and I want to grab all values of number equal to one

96
00:07:15,150 --> 00:07:16,340
with both groups in it.

97
00:07:16,380 --> 00:07:21,770
Meaning I want what I highlighted here 1 and then 0.3 1.6 9.

98
00:07:21,930 --> 00:07:26,710
But also I wanted this value 0.1 6 0.1 8.

99
00:07:26,850 --> 00:07:31,700
So I want all values were numb that insight index is equal to 1.

100
00:07:31,790 --> 00:07:39,370
This sort of indexing is tricky for something like EHLO see methods but it's not so bad with the X s

101
00:07:39,390 --> 00:07:48,250
or cross section method which you end up doing is specifying what you want as far as not equal to one

102
00:07:48,250 --> 00:07:48,430
.

103
00:07:48,480 --> 00:07:54,730
And then you have to indicate as a second arguments level and then pass in the name of the index.

104
00:07:54,840 --> 00:07:58,340
In this case the name of the index is numb.

105
00:07:58,590 --> 00:08:05,970
So essentially this allows us to grab a cross section where level equals numb is equal to 1 and that's

106
00:08:05,970 --> 00:08:09,140
how you're mainly going to be using this cross section.

107
00:08:09,510 --> 00:08:13,900
And now we see both groups where level num happens to be equal to 1.

108
00:08:13,920 --> 00:08:16,340
And this sort of data gets returned.

109
00:08:17,010 --> 00:08:21,910
OK don't worry too much since this is pretty advanced usage of Pandurs.

110
00:08:21,930 --> 00:08:28,200
I just want you to be aware of it later on as we learn more about data visualization and you start reaching

111
00:08:28,200 --> 00:08:28,590
your data.

112
00:08:28,590 --> 00:08:35,100
Capstone projects we'll revisit this cross section method to actually grab stock index data.

113
00:08:35,520 --> 00:08:40,230
But for now I want you to be aware of it but don't worry as far as being tested on it because it's more

114
00:08:40,230 --> 00:08:44,460
advanced usage and you won't see this sort of stuff very often throughout the course.

115
00:08:44,460 --> 00:08:49,290
In fact it really only shows up once in one of the more advanced data capstone projects and there's

116
00:08:49,290 --> 00:08:52,350
an explanation of how to use cross section again.

117
00:08:52,350 --> 00:08:56,010
So we'll go in and give you a refresher before you see this topic again.

118
00:08:56,040 --> 00:09:02,520
For now this was more just an advanced overview of multi index topics and index higher key topics.

119
00:09:02,520 --> 00:09:07,620
Mainly what you're going to want to do is index from the outside in step by step to get the data you

120
00:09:07,620 --> 00:09:08,400
want out.

121
00:09:08,810 --> 00:09:12,120
OK thanks everyone and I'll see you at the next lecture.
