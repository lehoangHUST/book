1
00:00:05,430 --> 00:00:06,300
Hello everyone.

2
00:00:06,300 --> 00:00:09,050
Welcome to the data frame's Part 2 lecture.

3
00:00:09,090 --> 00:00:14,310
Last time we left off on how to create a basic data frame and grab information from that data frame

4
00:00:14,310 --> 00:00:14,560
.

5
00:00:14,790 --> 00:00:19,760
Now we're going to look at conditional selection as well as some multa index parts of the data frame

6
00:00:19,820 --> 00:00:20,300
.

7
00:00:20,430 --> 00:00:23,120
Let's go ahead and jump to Jupiter notebook to get started.

8
00:00:23,520 --> 00:00:23,970
All right.

9
00:00:23,970 --> 00:00:25,940
Here we are back at the Jupiter notebook.

10
00:00:25,950 --> 00:00:28,460
I'm going to be using the same data frame as last time.

11
00:00:28,470 --> 00:00:35,600
Shurmur we just had to say numpad S&P pins PD import Rand and set the seat to 101 and then say that

12
00:00:35,600 --> 00:00:38,280
data frame was rent and 5 come for.

13
00:00:38,460 --> 00:00:41,270
And then here we have our data frame.

14
00:00:42,410 --> 00:00:45,240
Okay let's go in and talk about conditional selection.

15
00:00:45,360 --> 00:00:50,580
A very important feature of pantless is the ability to perform conditional selection using bracket notation

16
00:00:50,690 --> 00:00:57,570
and this is going to be very similar to PI for instance for a comparison operator against the data frame

17
00:00:57,930 --> 00:01:01,070
such as asking where is the data frame greater than zero.

18
00:01:01,080 --> 00:01:06,420
I will get a data from back of boolean values where it returns true if the data frame value at that

19
00:01:06,420 --> 00:01:10,620
point was greater than zero and false if it was not greater than zero.

20
00:01:10,740 --> 00:01:16,200
And this is very similar to the same conditional selection applied to an entire hiree except in this

21
00:01:16,200 --> 00:01:18,480
case we're doing of pand the state of frames.

22
00:01:18,480 --> 00:01:27,270
And just like this we can go ahead and say bullwhips bulled the f is equal to DFA greater than zero

23
00:01:27,280 --> 00:01:27,560
.

24
00:01:27,960 --> 00:01:29,590
And since say Boulia.

25
00:01:29,610 --> 00:01:32,470
Go ahead and check that out.

26
00:01:32,690 --> 00:01:39,120
And here we have our boolean data frame and if we pass that in to our original data frame with bracket

27
00:01:39,120 --> 00:01:48,750
notation then we will get out as a result values where it was true and Knoll's or any n where it happened

28
00:01:48,750 --> 00:01:49,820
to be false.

29
00:01:49,980 --> 00:01:55,200
And that's the way you can use conditional selection along with a data frame.

30
00:01:55,200 --> 00:01:58,830
Now usually you probably wouldn't be separating this out into two steps.

31
00:01:58,890 --> 00:02:00,230
You would just say.

32
00:02:00,270 --> 00:02:05,760
And then in brackets something like DF greater than zero and you would get this result.

33
00:02:06,030 --> 00:02:12,340
This sort of operation with a data frame and against a comparison operator isn't that common.

34
00:02:12,370 --> 00:02:17,220
Well most likely you'll end up doing is instead of just passing in the entire data frame you'll pass

35
00:02:17,220 --> 00:02:23,700
in a row or a column value and instead of returning Knolles what that's going to do is return only the

36
00:02:23,700 --> 00:02:28,970
rows or columns of a subset of the data frame where your conditions are true.

37
00:02:28,980 --> 00:02:33,720
Now let me go to show an example of what I mean by that couldn't take a look at our original data frame

38
00:02:33,720 --> 00:02:34,760
.

39
00:02:34,780 --> 00:02:38,830
Here we have rows A-3 and columns w through Z.

40
00:02:39,090 --> 00:02:42,900
What I'm going to go ahead and do is specify.

41
00:02:42,990 --> 00:02:46,580
Of W greater than zero.

42
00:02:46,620 --> 00:02:49,470
And notice I get a series back.

43
00:02:49,470 --> 00:02:54,770
True true false true true and this is linked to the actual index.

44
00:02:54,780 --> 00:03:01,390
And if I take a look at the W column I see that this corresponds with the W column values and the value

45
00:03:01,390 --> 00:03:03,980
at index c it was actually less than zero.

46
00:03:04,110 --> 00:03:06,710
So returns False for being greater than zero.

47
00:03:06,750 --> 00:03:13,380
I can now use this series of boolean values corresponding to rows to filter out rows based off of a

48
00:03:13,380 --> 00:03:19,470
column value and that means if I pass in the series into a data frame using bracket notation to say

49
00:03:19,470 --> 00:03:26,430
something like D-F DFW greater than zero I will only get back the rows where this happens to be true

50
00:03:26,720 --> 00:03:32,670
meaning I only get back the rows a b d and e it won't return row C since it was false here.

51
00:03:32,740 --> 00:03:35,340
Go ahead and run that and see what this looks like.

52
00:03:35,340 --> 00:03:36,120
Great.

53
00:03:36,130 --> 00:03:39,950
And now since I'm passing in a series I don't get those no values anymore.

54
00:03:40,050 --> 00:03:44,880
You only get those no values when you're doing this sort of condition on an entire data frame when you're

55
00:03:44,880 --> 00:03:47,470
actually passing in conditions based off of columns.

56
00:03:47,550 --> 00:03:52,580
You'll just get series values meaning you'll get only the rows were happens to be true.

57
00:03:52,650 --> 00:03:57,120
And this is the sort of conditional selection we're going to be using most often throughout this course

58
00:03:57,130 --> 00:03:57,640
.

59
00:03:58,170 --> 00:04:01,970
Let's go in and show just a few more examples to really drive this point home.

60
00:04:01,980 --> 00:04:09,010
Let's say I want to grab all the rows in my data frame where z is less than zero.

61
00:04:09,150 --> 00:04:16,500
So I say DMF Where the f of column Z is less than zero.

62
00:04:16,500 --> 00:04:21,460
Now let's take a look before we actually run this what should happen over Notice column Z.

63
00:04:21,750 --> 00:04:22,290
Where is it.

64
00:04:22,320 --> 00:04:23,150
Less than zero.

65
00:04:23,160 --> 00:04:31,210
Well that's only occurring in row C so column Z as in Zelda and then row C is in cat.

66
00:04:31,260 --> 00:04:33,260
This is the only row that should be returned.

67
00:04:33,270 --> 00:04:35,720
But remember asking for the entire data from back.

68
00:04:35,850 --> 00:04:40,110
So it should return just this row C for us.

69
00:04:40,110 --> 00:04:41,100
And there it is.

70
00:04:41,340 --> 00:04:42,590
OK great.

71
00:04:42,600 --> 00:04:47,520
Now something else to note here is that when you're doing these sort of commands go ahead and go back

72
00:04:47,520 --> 00:04:50,190
to R W greater than zero.

73
00:04:50,880 --> 00:04:57,220
You get a data frame in response and that means you can go ahead and call commands off of this data

74
00:04:57,230 --> 00:04:57,880
frame.

75
00:04:58,050 --> 00:05:01,260
Then you can do this either in one step or two steps.

76
00:05:01,320 --> 00:05:06,370
I'm going to go in and say result DSF is equal to this and then take a look at results.

77
00:05:06,420 --> 00:05:12,910
DMF which is this subset of the data frame without that row see in it and that means I can go ahead

78
00:05:13,030 --> 00:05:21,910
and grab results off of this such as X and here I have four values of X A B D and E based off of this

79
00:05:21,910 --> 00:05:25,910
resulting data frame that didn't have that row seen it hasn't Charlie.

80
00:05:26,380 --> 00:05:32,200
But instead of actually separating this out into two steps such as grabbing the X column I can do this

81
00:05:32,200 --> 00:05:33,030
all in one step.

82
00:05:33,130 --> 00:05:41,230
And let me show you what I mean by that I can go ahead and say return the data frame where the column

83
00:05:41,230 --> 00:05:43,780
value of W happens to be greater than zero.

84
00:05:43,780 --> 00:05:45,670
So return those rows to me.

85
00:05:45,670 --> 00:05:48,050
That means all the rows minus the C row.

86
00:05:48,340 --> 00:05:53,170
And since this is a data frame I can actually go ahead and stack commands such as bracket notation on

87
00:05:53,170 --> 00:05:57,530
top of that such as return the X column where that's true.

88
00:05:57,700 --> 00:06:04,330
And now I get the same results as I did up here except it's all done in one step and this is something

89
00:06:04,330 --> 00:06:06,570
that can be intimidating to beginners at first.

90
00:06:06,670 --> 00:06:09,380
So there's a lot of brackets and a lot of stuff going on here.

91
00:06:09,580 --> 00:06:14,620
But essentially this is just instead of splitting everything up into multiple steps and putting it all

92
00:06:14,620 --> 00:06:17,480
into one step.

93
00:06:17,620 --> 00:06:24,100
And likewise since this is a data frame I can bracket for multiple columns by passing in the lists such

94
00:06:24,100 --> 00:06:29,890
as why comma X and we can see we get a result here.

95
00:06:29,920 --> 00:06:36,100
Let me go ahead and break this line down one more time to show the steps that we're taking.

96
00:06:36,100 --> 00:06:41,090
First off we're going to go in and say Boudia is equal to.

97
00:06:41,680 --> 00:06:48,250
Well it's going to say bhool series and since that's a little more accurate is we're at DFW is greater

98
00:06:48,250 --> 00:06:49,140
than zero.

99
00:06:49,150 --> 00:06:56,590
So if I say bhool series I get this boolean series back then what I'm going to go ahead and do is say

100
00:06:56,590 --> 00:07:04,010
result is equal to DSF of that bool series.

101
00:07:04,510 --> 00:07:06,870
Let's go ahead and check out the results.

102
00:07:07,630 --> 00:07:15,690
And it should just be wherever that series was true which is a b d and e and there is my result.

103
00:07:15,820 --> 00:07:18,690
That's the entire data frame without the row seen it.

104
00:07:18,760 --> 00:07:28,200
And then I can go ahead and offer that result call a list of columns so we can go ahead and say why

105
00:07:28,840 --> 00:07:33,910
comma X and if we wanted to we could actually even separate the separate this out and so one more step

106
00:07:34,360 --> 00:07:43,840
by saying Mike calls for columns passing that list and then say a result of Mike calls and we get the

107
00:07:43,840 --> 00:07:48,760
exact same thing we have here done in one line as in multiple lines.

108
00:07:48,910 --> 00:07:53,840
That means if you're ever confused on something that looks like this of a ton of brackets and Pandurs

109
00:07:54,070 --> 00:07:56,110
see if you can break it down into multiple steps.

110
00:07:56,110 --> 00:08:00,640
If that makes more sense to you throughout the course we're going to be doing this type of notation

111
00:08:00,680 --> 00:08:00,820
.

112
00:08:00,910 --> 00:08:02,200
Kind of one liners.

113
00:08:02,200 --> 00:08:06,100
And as you get more and more comfortable of pandas you'll find yourself using these one liners more

114
00:08:06,100 --> 00:08:11,080
and more often but if you're ever confused always feel free to break it down into multiple steps.

115
00:08:11,080 --> 00:08:15,970
The only disadvantage as far as bringing it down multiple steps is that you are taking up memory which

116
00:08:16,150 --> 00:08:18,130
with the variable that you define.

117
00:08:18,220 --> 00:08:23,260
So as you get better and better of pandas you want to move towards a simple one line abstraction of

118
00:08:23,260 --> 00:08:24,750
all these commands.

119
00:08:24,760 --> 00:08:30,370
All right go ahead and pause the video now and really make sure you understand how line in 58.

120
00:08:30,370 --> 00:08:36,280
Here is the exact same thing as separate out into multiple lines.

121
00:08:36,310 --> 00:08:36,700
All right.

122
00:08:36,700 --> 00:08:38,230
Let's go ahead and explore real quick.

123
00:08:38,230 --> 00:08:42,490
The concept of using multiple conditions such as two or more conditions.

124
00:08:42,580 --> 00:08:48,940
Right now we feel comfortable with doing something like this which is returning a subset of the data

125
00:08:48,940 --> 00:08:50,700
frame based off of one condition.

126
00:08:50,740 --> 00:08:56,320
But what if you wanted multiple conditions such as where w is greater than zero and Y was greater than

127
00:08:56,410 --> 00:08:57,170
1.

128
00:08:57,520 --> 00:09:06,910
Well what you could do is try something like this is in parentheses pass in one condition and then say

129
00:09:06,970 --> 00:09:10,210
and pass in another condition.

130
00:09:10,210 --> 00:09:11,740
And this is going to return an error.

131
00:09:11,970 --> 00:09:17,710
And I'm going to do this on purpose to explain why there's an error happening here and this is a common

132
00:09:17,710 --> 00:09:23,410
mistake for beginners to put this and here and you'll get a mistake that says something about the series

133
00:09:23,410 --> 00:09:24,370
being ambiguous.

134
00:09:24,370 --> 00:09:30,520
We scroll down here we see this the truth value of a series is ambiguous.

135
00:09:30,520 --> 00:09:37,420
And what that is trying to say is that Python's normal and operator can't actually take into account

136
00:09:37,750 --> 00:09:43,960
a series of boolean values compared to another series of boolean values and operator can only take into

137
00:09:43,960 --> 00:09:47,680
account single booleans at a time.

138
00:09:47,680 --> 00:09:54,790
So true and false returns False True and true returns true etc..

139
00:09:55,090 --> 00:10:03,190
That means when you pass an entire series of boolean values such as this the and operator begins to

140
00:10:03,190 --> 00:10:04,250
get confused.

141
00:10:04,390 --> 00:10:09,880
It's can only deal with these single instances of boolean values which is why when you're working with

142
00:10:09,880 --> 00:10:15,230
pandas and you want multiple conditions you actually have to use in ampersands which is this.

143
00:10:15,250 --> 00:10:20,360
And so that's going to be shift 7 on your keyboard for most standard keyboards.

144
00:10:20,620 --> 00:10:25,660
And notice here that I'm passing these conditions in parentheses to show clear separation between each

145
00:10:25,660 --> 00:10:26,790
of these conditions.

146
00:10:26,920 --> 00:10:31,070
And then if I run this I get the Row E where this happens to be true.

147
00:10:31,510 --> 00:10:32,840
OK let's go to break that down.

148
00:10:32,860 --> 00:10:39,430
One quick last time when you're trying to use multiple conditions you can't use Python's normal and

149
00:10:39,490 --> 00:10:40,530
operator.

150
00:10:40,960 --> 00:10:47,470
You have to use the ampersand and then you pass in the multiple conditions in parentheses and then finally

151
00:10:47,470 --> 00:10:49,830
put it inside of brackets for your data frame.

152
00:10:50,050 --> 00:10:57,130
If you want to do an OR operation you can just replace this with the pipe operator which is right above

153
00:10:57,180 --> 00:10:57,660
your.

154
00:10:57,760 --> 00:11:04,110
Usually for most keyboards on your Enter key go it go right above it and then do shift on that backslash

155
00:11:04,120 --> 00:11:04,190
.

156
00:11:04,240 --> 00:11:09,280
And this should give you the pipe operator and that's going to be a replacement for or because if you

157
00:11:09,280 --> 00:11:12,160
try using or you'll get the same error.

158
00:11:12,250 --> 00:11:18,160
So that's with or if I try it with Python's normal or Again I'll get the truth value of a series is

159
00:11:18,160 --> 00:11:18,910
ambiguous.

160
00:11:18,970 --> 00:11:24,380
And that's because you get a series of those values instead of just one or two boolean values.

161
00:11:24,450 --> 00:11:27,840
OK you can go ahead and reference a notes if you want more examples of this.

162
00:11:27,940 --> 00:11:33,220
But basically if you want multiple conditions pass in each condition in parentheses and then use an

163
00:11:33,220 --> 00:11:41,650
ampersand or pipe operator for the ends or let's go ahead now and shift gears to talk about index and

164
00:11:41,650 --> 00:11:47,140
a little more details about it we're going to discuss now is resetting the index or setting it to something

165
00:11:47,170 --> 00:11:48,140
else.

166
00:11:48,160 --> 00:11:50,770
Let me go ahead and take a look at our original data frame.

167
00:11:50,770 --> 00:11:54,610
I want to go in and clear these cells here by just running them.

168
00:11:54,740 --> 00:11:56,820
And let's take a look at our data frame.

169
00:11:56,860 --> 00:12:03,970
Again we have Rose aither e in columns w through Z in order to reset the index back to the default which

170
00:12:03,970 --> 00:12:09,070
is just a range index or a 1 2 3 4 all the way up to the nth row.

171
00:12:09,210 --> 00:12:16,780
You can do is call the method reset underscore index and remember to close parentheses that we actually

172
00:12:16,870 --> 00:12:18,380
run that method.

173
00:12:18,900 --> 00:12:26,950
And if you call that notice you will get the index reset to a column and you'll get the actual index

174
00:12:27,010 --> 00:12:28,690
then to be numerical.

175
00:12:28,690 --> 00:12:32,320
And that's how you can reset the index.

176
00:12:32,710 --> 00:12:37,530
Something to note here is just like a lot of other hand those data from operations.

177
00:12:37,570 --> 00:12:42,010
This doesn't occur in place unless you specify it for it to occur in place.

178
00:12:42,010 --> 00:12:47,860
So if I call back T.F. I still have that original index of labels if you want this to actually occur

179
00:12:47,860 --> 00:12:54,480
in place what you would do is say in place equals true and pass into the reset underscore index.

180
00:12:54,520 --> 00:12:56,640
For now we'll go ahead and not do that.

181
00:12:56,650 --> 00:12:59,620
That way we still retain our original data frame.

182
00:12:59,650 --> 00:13:06,680
Now go ahead and clear this out again if you just want to reset the index to a numerical value.

183
00:13:06,790 --> 00:13:12,080
You can just use that Reesa index and your old index will become a column of your data frame.

184
00:13:12,630 --> 00:13:13,140
OK.

185
00:13:13,300 --> 00:13:19,060
Let's go ahead and show one more new index example such as setting the index and in order to do this

186
00:13:19,150 --> 00:13:25,500
I'm going to go ahead and create a new index called New i n d.

187
00:13:27,250 --> 00:13:32,910
And I'm going to use a little trick here that I'll explain in just a second.

188
00:13:33,040 --> 00:13:37,580
This is going to be a bunch of state abbreviations and I'm going to say that split on this string.

189
00:13:38,020 --> 00:13:44,050
And remember that split off a string should say common method for splitting off a blank space.

190
00:13:44,230 --> 00:13:48,960
But this is a nice quick way to create a list instead of having to type out every comma.

191
00:13:49,240 --> 00:13:54,850
So I want to go ahead and set that list equal to new I indeed.

192
00:13:54,850 --> 00:14:02,350
So I have my new index values here and what I'm going to do is put this as a column in my data frame

193
00:14:02,350 --> 00:14:02,890
.

194
00:14:03,160 --> 00:14:09,520
So I'm going to go ahead and say DFA States is equal to new i n d.

195
00:14:09,640 --> 00:14:12,610
And since they mentions match so there's five items here.

196
00:14:12,700 --> 00:14:16,030
It will match from 0 to 4 here on the state of frame.

197
00:14:16,060 --> 00:14:24,070
So if I check my data frame I have this new column called states CA NY w y o RCO.

198
00:14:24,100 --> 00:14:29,000
Now we know how to reset the index which is just doing a reset underscore index method.

199
00:14:29,170 --> 00:14:34,150
But if you have a column in your data frame that you want to be the index which you can go ahead and

200
00:14:34,150 --> 00:14:37,950
do is say set index instead of reset index.

201
00:14:38,110 --> 00:14:46,120
For example I can say DF dot set underscore index and then pass in the column name you want to be the

202
00:14:46,120 --> 00:14:54,100
new index so states here and if I do shift enter now the states column has become the index.

203
00:14:54,100 --> 00:15:00,320
Keep in mind unless you retain this information of the index so overwrite your old index and you won't

204
00:15:00,370 --> 00:15:03,630
actually be able to retain this information as a new column.

205
00:15:03,760 --> 00:15:07,810
Unlike resets index that allows you to have that new column.

206
00:15:07,810 --> 00:15:11,280
So that's set index versus reset index.

207
00:15:11,340 --> 00:15:14,750
Again if I check out my data frame here this wasn't in place.

208
00:15:14,830 --> 00:15:16,190
I would need to add the argument.

209
00:15:16,210 --> 00:15:18,650
If I do shift enter here in place.

210
00:15:18,680 --> 00:15:20,140
Equals true.

211
00:15:20,810 --> 00:15:28,820
Let me go ahead and just do a quick review of what we just covered before we head up to part 3.

212
00:15:28,820 --> 00:15:34,180
Ok we learned about conditional selection which is very similar to PI operations.

213
00:15:34,180 --> 00:15:39,550
You basically get a data frame of boolean values and if you pass in a whole data frame of boolean values

214
00:15:39,880 --> 00:15:44,830
you'll get the values where it's true and you'll get any n or no values where it was false.

215
00:15:44,830 --> 00:15:52,090
If you pass in a series of boolean values such as a column with a comparison operator you'll end up

216
00:15:52,090 --> 00:15:57,850
only getting the rows of the data frame where serious happened to be true and you could break this down

217
00:15:57,910 --> 00:16:00,350
into multiple steps if you wanted to.

218
00:16:00,360 --> 00:16:03,160
Again these two cells are probably the most important to understand.

219
00:16:03,160 --> 00:16:07,810
Out of this lecture if you understand this then you understand how to do a conditional selection in

220
00:16:07,810 --> 00:16:08,970
pantless.

221
00:16:09,190 --> 00:16:15,490
Then scrolling down if you wanted to do multiple conditional selection you could do an ampersand or

222
00:16:15,490 --> 00:16:19,990
a pipe operator cannot use Python's builtin and or or operators.

223
00:16:20,170 --> 00:16:27,460
Because of the ambiguous values in a Truth series and remember to use parentheses to separate each conditional

224
00:16:27,460 --> 00:16:30,040
selection statement.

225
00:16:30,040 --> 00:16:31,300
Then finally we have reset.

226
00:16:31,330 --> 00:16:38,650
Index reset index is just going to reset your index to a numerical index and take your old index and

227
00:16:38,650 --> 00:16:45,670
set it as a new column called index and then you can set a new index instead of resetting any index

228
00:16:45,970 --> 00:16:49,910
based off a current column just by saying Set underscore index.

229
00:16:50,170 --> 00:16:53,090
And both these methods are not in place by default.

230
00:16:53,140 --> 00:16:55,560
So make sure to specify in place ECOs true.

231
00:16:55,690 --> 00:16:57,970
If you want the change to be permanent.

232
00:16:58,030 --> 00:17:00,550
All right that's it for this lecture.

233
00:17:00,550 --> 00:17:01,350
Thanks everyone.

234
00:17:01,390 --> 00:17:04,800
I'll see at the next lecture or we'll discuss index higher.

235
00:17:04,960 --> 00:17:08,630
Again all these notes are just in a notebook called Data frames.

236
00:17:08,650 --> 00:17:10,210
Thanks and I'll see if the next lecture
